@ARTICLE{10.1109/ACCESS.2020.3019282,
  author={Liu, X. and Du, X. and Lei, Q. and Liu, K.},
  journal={IEEE Access}, 
  title={Multifamily Classification of Android Malware With a Fuzzy Strategy to Resist Polymorphic Familial Variants}, 
  year={2020},
  doi={10.1109/ACCESS.2020.3019282}}


@INPROCEEDINGS{9888816,
  author={Rabheru, R. and Hanif, H. and Maffeis, S.},
  booktitle={2022 IEEE Conference on Dependable and Secure Computing (DSC)}, 
  title={A Hybrid Graph Neural Network Approach for Detecting PHP Vulnerabilities}, 
  year={2022},
  doi={10.1109/DSC54232.2022.9888816}}

@inproceedings{sejfia_practical_2022,
	title = {Practical automated detection of malicious npm packages},
	isbn = {978-1-4503-9221-1},
	url = {https://dl.acm.org/doi/10.1145/3510003.3510104},
	doi = {10.1145/3510003.3510104},
	language = {en},
	urldate = {2023-01-20},
	booktitle = {Proceedings of the 44th {International} {Conference} on {Software} {Engineering}},
	author = {Sejfia, A. and Schäfer, M.},
	month = may,
	year = {2022},
	file = {Full Text:/Users/beatrice.casey/Zotero/storage/9VL5CSPA/Sejfia and Schäfer - 2022 - Practical automated detection of malicious npm pac.pdf:application/pdf},
}

@inproceedings{fu_vulrepair_2022,
	title = {{VulRepair}: a {T5}-based automated software vulnerability repair},
	isbn = {978-1-4503-9413-0},
	shorttitle = {{VulRepair}},
	url = {https://dl.acm.org/doi/10.1145/3540250.3549098},
	doi = {10.1145/3540250.3549098},
	language = {en},
	urldate = {2023-01-20},
	booktitle = {Proceedings of the 30th {ACM} {Joint} {European} {Software} {Engineering} {Conference} and {Symposium} on the {Foundations} of {Software} {Engineering}},
	author = {Fu, M. and Tantithamthavorn, C. and Le, T. and Nguyen, V. and Phung, D.}
}


@INPROCEEDINGS{8827012,
  author={Mimura, M. and Suga, Y.},
  booktitle={2019 14th Asia Joint Conference on Information Security (AsiaJCIS)}, 
  title={Filtering Malicious JavaScript Code with Doc2Vec on an Imbalanced Dataset}, 
  year={2019},
  doi={10.1109/AsiaJCIS.2019.000-9}}


@INPROCEEDINGS{8959617,
  author={Hasan, M. and Balbahaith, Z. and Tarique, M.},
  booktitle={2019 International Conference on Electrical and Computing Technologies and Applications (ICECTA)}, 
  title={Detection of SQL Injection Attacks: A Machine Learning Approach}, 
  year={2019},
  doi={10.1109/ICECTA48151.2019.8959617}}


@INPROCEEDINGS{8489414,
  author={Ndichu, S. and Ozawa, S. and Misu, T. and Okada, K.},
  booktitle={2018 International Joint Conference on Neural Networks (IJCNN)}, 
  title={A Machine Learning Approach to Malicious JavaScript Detection using Fixed Length Vector Representation}, 
  year={2018},
  doi={10.1109/IJCNN.2018.8489414}}


@INPROCEEDINGS{10075777,
  author={Abdulhamza, F. R. and Al-Janabi, R. J. S.},
  booktitle={2022 International Conference on Data Science and Intelligent Computing (ICDSIC)}, 
  title={SQL Injection Detection Using 2D-Convolutional Neural Networks (2D-CNN)}, 
  year={2022},
  doi={10.1109/ICDSIC56987.2022.10075777}}


@INPROCEEDINGS{7846747,
  author={Wang, Z. and Cai, J. and Cheng, S. and Li, W.},
  booktitle={2016 IEEE 37th Sarnoff Symposium}, 
  title={DroidDeepLearner: Identifying Android malware using deep learning}, 
  year={2016},
  doi={10.1109/SARNOF.2016.7846747}}


@ARTICLE{8765764,
  author={Shi, H. and Wang, R. and Fu, Y. and Jiang, Y. and Dong, J. and Tang, K. and Sun, J.},
  journal={IEEE Transactions on Industrial Informatics}, 
  title={Vulnerable Code Clone Detection for Operating System Through Correlation-Induced Learning}, 
  year={2019},
  doi={10.1109/TII.2019.2929739}}


@INPROCEEDINGS{8376705,
  author={Koli, J. D.},
  booktitle={2018 Technologies for Smart-City Energy Security and Power (ICSESP)}, 
  title={RanDroid: Android malware detection using random machine learning classifiers}, 
  year={2018},
  doi={10.1109/ICSESP.2018.8376705}}


@INPROCEEDINGS{10062434,
  author={Mamede, C. and Pinconschi, E. and Abreu, R. and Campos, J.},
  booktitle={2022 IEEE 22nd International Conference on Software Quality, Reliability and Security (QRS)}, 
  title={Exploring Transformers for Multi-Label Classification of Java Vulnerabilities}, 
  year={2022},
  doi={10.1109/QRS57517.2022.00015}}


@ARTICLE{9864301,
  author={Zou, D. and Hu, Y. and Li, W. and Wu, Y. and Zhao, H. and Jin, H.},
  journal={IEEE Transactions on Dependable and Secure Computing}, 
  title={mVulPreter: A Multi-Granularity Vulnerability Detection System With Interpretations}, 
  year={2022},
  doi={10.1109/TDSC.2022.3199769}}

@ARTICLE{9927184,
  author={Nguyen, H. V. and Zheng, J. and Inomata, A. and Uehara, T.},
  journal={IEEE Access}, 
  title={Code Aggregate Graph: Effective Representation for Graph Neural Networks to Detect Vulnerable Code}, 
  year={2022},
  doi={10.1109/ACCESS.2022.3216395}}


@INPROCEEDINGS{9700294,
  author={Zheng, W. and Jiang, Y. and Su, X.},
  booktitle={2021 IEEE 32nd International Symposium on Software Reliability Engineering (ISSRE)}, 
  title={Vu1SPG: Vulnerability detection based on slice property graph representation learning}, 
  year={2021},
  doi={10.1109/ISSRE52982.2021.00054}}


@INPROCEEDINGS{9799475,
  author={Yan, X. and Wang, S. and Gai, K.},
  booktitle={2022 IEEE 8th Intl Conference on Big Data Security on Cloud (BigDataSecurity), IEEE Intl Conference on High Performance and Smart Computing, (HPSC) and IEEE Intl Conference on Intelligent Data and Security (IDS)}, 
  title={A Semantic Analysis-Based Method for Smart Contract Vulnerability}, 
  year={2022},
  doi={10.1109/BigDataSecurityHPSCIDS54978.2022.00015}}


@INPROCEEDINGS{8949045,
  author={Momeni, P. and Wang, Y. and Samavi, R.},
  booktitle={2019 17th International Conference on Privacy, Security and Trust (PST)}, 
  title={Machine Learning Model for Smart Contracts Security Analysis}, 
  year={2019},
  doi={10.1109/PST47121.2019.8949045}}


@INPROCEEDINGS{9741883,
  author={Xia, X. and Wang, Y. and Yang, Y.},
  booktitle={2021 2nd International Conference on Electronics, Communications and Information Technology (CECIT)}, 
  title={Source Code Vulnerability Detection Based On SAR-GIN}, 
  year={2021},
  doi={10.1109/CECIT53797.2021.00202}}


@INPROCEEDINGS{9177528,
  author={He, Y. and Sun, H. and Feng, H.},
  booktitle={2020 12th International Conference on Advanced Computational Intelligence (ICACI)}, 
  title={UA-Miner: Deep Learning Systems for Expose Unprotected API Vulnerability in Source Code}, 
  year={2020},
  doi={10.1109/ICACI49185.2020.9177528}}


@ARTICLE{9272730,
  author={Medeiros, N. and Ivaki, N. and Costa, P. and Vieira, M.},
  journal={IEEE Access}, 
  title={Vulnerable Code Detection Using Software Metrics and Machine Learning}, 
  year={2020},
  doi={10.1109/ACCESS.2020.3041181}}

@INPROCEEDINGS{9652940,
  author={Wang, X. and Wang, S. and Feng, P. and Sun, K. and Jajodia, S. and Benchaaboun, S. and Geck, f.},
  booktitle={MILCOM 2021 - 2021 IEEE Military Communications Conference (MILCOM)}, 
  title={PatchRNN: A Deep Learning-Based System for Security Patch Identification}, 
  year={2021},
  doi={10.1109/MILCOM52596.2021.9652940}}

@INPROCEEDINGS{8919513,
  author={Chong, T.-Y. and Anu, V. and Sultana, K. Z.},
  booktitle={2019 IEEE International Conference on Computational Science and Engineering (CSE) and IEEE International Conference on Embedded and Ubiquitous Computing (EUC)}, 
  title={Using Software Metrics for Predicting Vulnerable Code-Components: A Study on Java and Python Open Source Projects}, 
  year={2019},
  doi={10.1109/CSE/EUC.2019.00028}}


@INPROCEEDINGS{8939256,
  author={Liao, J.-W. and Tsai, T.-T. and He, C.-K. and Tien, C.-W.},
  booktitle={2019 Sixth International Conference on Internet of Things: Systems, Management and Security (IOTSMS)}, 
  title={SoliAudit: Smart Contract Vulnerability Assessment Based on Machine Learning and Fuzz Testing}, 
  year={2019},
  doi={10.1109/IOTSMS48152.2019.8939256}}


@INPROCEEDINGS{9343188,
  author={Cao, D. and Huang, J. and Zhang, X. and Liu, X.},
  booktitle={2020 IEEE 19th International Conference on Trust, Security and Privacy in Computing and Communications (TrustCom)}, 
  title={FTCLNet: Convolutional LSTM with Fourier Transform for Vulnerability Detection}, 
  year={2020},
  doi={10.1109/TrustCom50675.2020.00078}}


@INPROCEEDINGS{9638301,
  author={Ganesh, S. and Ohlsson, T. and Palma, F.},
  booktitle={2021 Swedish Workshop on Data Science (SweDS)}, 
  title={Predicting Security Vulnerabilities using Source Code Metrics}, 
  year={2021},
  doi={10.1109/SweDS53855.2021.9638301}}


@ARTICLE{9054952,
  author={Liu, S. and Lin, G. and Qu, L. and Zhang, J. and De Vel, O. and Montague, P. and Xiang, Y.},
  journal={IEEE Transactions on Dependable and Secure Computing}, 
  title={CD-VulD: Cross-Domain Vulnerability Discovery Based on Deep Domain Adaptation}, 
  year={2022},
  doi={10.1109/TDSC.2020.2984505}}


@INPROCEEDINGS{9377803,
  author={Mao, Y. and Li, Y. and Sun, J. and Chen, Y.},
  booktitle={2020 IEEE International Conference on Big Data (Big Data)}, 
  title={Explainable Software vulnerability detection based on Attention-based Bidirectional Recurrent Neural Networks}, 
  year={2020},
  doi={10.1109/BigData50022.2020.9377803}}


@ARTICLE{9069943,
  author={Zagane, M. and Abdi, M. K. and Alenezi, M.},
  journal={IEEE Access}, 
  title={Deep Learning for Software Vulnerabilities Detection Using Code Metrics}, 
  year={2020},
  doi={10.1109/ACCESS.2020.2988557}}


@INPROCEEDINGS{9798297,
  author={Gu, M. and Feng, H. and Sun, H. and Liu, P. and Yue, Q. and Hu, J. and Cao, C. and Zhang, Y.},
  booktitle={IEEE INFOCOM 2022 - IEEE Conference on Computer Communications Workshops (INFOCOM WKSHPS)}, 
  title={Hierarchical Attention Network for Interpretable and Fine-Grained Vulnerability Detection}, 
  year={2022},
  doi={10.1109/INFOCOMWKSHPS54753.2022.9798297}}


@INPROCEEDINGS{9484500,
  author={Ziems, N. and Wu, S.},
  booktitle={IEEE INFOCOM 2021 - IEEE Conference on Computer Communications Workshops (INFOCOM WKSHPS)}, 
  title={Security Vulnerability Detection Using Deep Learning Natural Language Processing}, 
  year={2021},
  doi={10.1109/INFOCOMWKSHPS51825.2021.9484500}}


@INPROCEEDINGS{9163061,
  author={Feng, H. and Fu, X. and Sun, H. and Wang, H. and Zhang, Y.},
  booktitle={IEEE INFOCOM 2020 - IEEE Conference on Computer Communications Workshops (INFOCOM WKSHPS)}, 
  title={Efficient Vulnerability Detection based on abstract syntax tree and Deep Learning}, 
  year={2020},
  doi={10.1109/INFOCOMWKSHPS50562.2020.9163061}}


@INPROCEEDINGS{9776051,
  author={Wu, T. and Chen, L. and Du, G. and Zhu, C. and Cui, N. and Shi, G.},
  booktitle={2022 IEEE 25th International Conference on Computer Supported Cooperative Work in Design (CSCWD)}, 
  title={Inductive Vulnerability Detection via Gated Graph Neural Network}, 
  year={2022},
  doi={10.1109/CSCWD54268.2022.9776051}}


@INPROCEEDINGS{10092211,
  author={Watson, A. and Ufuktepe, E. and Palaniappan, K.},
  booktitle={2022 IEEE Applied Imagery Pattern Recognition Workshop (AIPR)}, 
  title={Detecting Software Code Vulnerabilities Using 2D Convolutional Neural Networks with Program Slicing Feature Maps}, 
  year={2022},
  doi={10.1109/AIPR57179.2022.10092211}}


@INPROCEEDINGS{9985089,
  author={Kim, S. and Choi, J. and Ahmed, M. E. and Nepal, S. and Kim, H.},
  booktitle={2022 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW)}, 
  title={VulDeBERT: A Vulnerability Detection System Using BERT}, 
  year={2022},
  doi={10.1109/ISSREW55968.2022.00042}}


@INPROCEEDINGS{9376145,
  author={Wu, Y. and Lu, J. and Zhang, Y. and Jin, S.},
  booktitle={2021 IEEE 11th Annual Computing and Communication Workshop and Conference (CCWC)}, 
  title={Vulnerability Detection in C/C++ Source Code With Graph Representation Learning}, 
  year={2021},
  doi={10.1109/CCWC51732.2021.9376145}}


@INPROCEEDINGS{9833680,
  author={Tang, Z. and Hu, Q. and Hu, Y. and Kuang, W. and Chen, J.},
  booktitle={2022 52nd Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)}, 
  title={SEVulDet: A Semantics-Enhanced Learnable Vulnerability Detector}, 
  year={2022},
  doi={10.1109/DSN53405.2022.00026}}


@INPROCEEDINGS{9343065,
  author={Zeng, J. and Nie, X. and Chen, L. and Li, J. and Du, G. and Shi, G.},
  booktitle={2020 IEEE 19th International Conference on Trust, Security and Privacy in Computing and Communications (TrustCom)}, 
  title={An Efficient Vulnerability Extrapolation Using Similarity of Graph Kernel of PDGs}, 
  year={2020},
  doi={10.1109/TrustCom50675.2020.00229}}


@INPROCEEDINGS{9644777,
  author={Wu, T. and Chen, L. and Du, G. and Zhu, C. and Shi, G.},
  booktitle={2021 IEEE Intl Conf on Parallel \& Distributed Processing with Applications, Big Data \& Cloud Computing, Sustainable Computing \& Communications, Social Computing \& Networking (ISPA/BDCloud/SocialCom/SustainCom)}, 
  title={Self-Attention based Automated Vulnerability Detection with Effective Data Representation}, 
  year={2021},
  doi={10.1109/ISPA-BDCloud-SocialCom-SustainCom52081.2021.00126}}


@ARTICLE{8846081,
  author={Zou, D. and Wang, S. and Xu, S. and Li, Z. and Jin, H.},
  journal={IEEE Transactions on Dependable and Secure Computing}, 
  title={$\mu$VulDeePecker: A Deep Learning-Based System for Multiclass Vulnerability Detection}, 
  year={2021},
  doi={10.1109/TDSC.2019.2942930}}


@INPROCEEDINGS{9443902,
  author={An, W. and Chen, L. and Wang, J. and Du, G. and Shi, G. and Meng, D.},
  booktitle={2020 IEEE Intl Conf on Parallel \& Distributed Processing with Applications, Big Data \& Cloud Computing, Sustainable Computing \& Communications, Social Computing \& Networking (ISPA/BDCloud/SocialCom/SustainCom)}, 
  title={AVDHRAM: Automated Vulnerability Detection based on Hierarchical Representation and Attention Mechanism}, 
  year={2020},
  doi={10.1109/ISPA-BDCloud-SocialCom-SustainCom51426.2020.00068}}


@INPROCEEDINGS{9842744,
  author={Yan, G. and Chen, S. and Bail, Y. and Li, X.},
  booktitle={2022 IEEE 46th Annual Computers, Software, and Applications Conference (COMPSAC)}, 
  title={Can Deep Learning Models Learn the Vulnerable Patterns for Vulnerability Detection?}, 
  year={2022},
  doi={10.1109/COMPSAC54236.2022.00142}}


@INPROCEEDINGS{9892444,
  author={Cheng, K. and Du, G. and Wu, T. and Chen, L. and Shi, G.},
  booktitle={2022 International Joint Conference on Neural Networks (IJCNN)}, 
  title={Automated Vulnerable Codes Mutation through Deep Learning for Variability Detection}, 
  year={2022},
  doi={10.1109/IJCNN55064.2022.9892444}}


@ARTICLE{6963442,
  author={Shar, L. K. and Briand, L. C. and Tan, H. B. K.},
  journal={IEEE Transactions on Dependable and Secure Computing}, 
  title={Web Application Vulnerability Prediction Using Hybrid Program Analysis and Machine Learning}, 
  year={2015},
  doi={10.1109/TDSC.2014.2373377}}

@incollection{155,
	title = {Call {Graph} {Based} {Android} {Malware} {Detection} with {CNN}},
	isbn = {9789811503092 9789811503108},
	url = {http://link.springer.com/10.1007/978-981-15-0310-8_5},
	language = {en},
	urldate = {2023-01-20},
	booktitle = {Software {Engineering} and {Methodology} for {Emerging} {Domains}},
	author = {Liu, Y. and Li, G. and Jin, Z.},
	year = {2019},
	doi = {10.1007/978-981-15-0310-8_5},
	note = {Series Title: Communications in Computer and Information Science}
}

@article{walunj_defect_2022,
	title = {Defect prediction using deep learning with {Network} {Portrait} {Divergence} for software evolution},
	issn = {1382-3256, 1573-7616},
	url = {https://link.springer.com/10.1007/s10664-022-10147-0},
	doi = {10.1007/s10664-022-10147-0},
	language = {en},
	number = {5},
	urldate = {2023-01-20},
	journal = {Empirical Software Engineering},
	author = {Walunj, V. and Gharibi, G. and Alanazi, R. and Lee, Y.},
	month = sep,
	year = {2022},
}



@INPROCEEDINGS{10077034,
  author={Mahyari, A.},
  booktitle={2022 IEEE 22nd International Conference on Software Quality, Reliability, and Security Companion (QRS-C)}, 
  title={A Hierarchical Deep Neural Network for Detecting Lines of Codes with Vulnerabilities}, 
  year={2022},
  doi={10.1109/QRS-C57518.2022.00011}}


@INPROCEEDINGS{9933216,
  author={Xue, Y. and Guo, J. and Zhang, L. and Song, H.},
  booktitle={2022 International Conference on Computer Network, Electronic and Automation (ICCNEA)}, 
  title={Message Passing Graph Neural Networks for Software Security Vulnerability Detection}, 
  year={2022},
  doi={10.1109/ICCNEA57056.2022.00041}}


@INPROCEEDINGS{9824581,
  author={Li, N. and Liu, Y. and Li, L. and Wang, Y.},
  booktitle={2022 3rd International Conference on Computer Vision, Image and Deep Learning \& International Conference on Computer Engineering and Applications (CVIDL \& ICCEA)}, 
  title={Smart Contract Vulnerability Detection Based on Deep and Cross Network}, 
  year={2022},
  doi={10.1109/CVIDLICCEA56201.2022.9824581}}


@INPROCEEDINGS{10063706,
  author={Gear, J. and Xu, Y. and Foo, E. and Gauravaram, P. and Jadidi, Z. and Simpson, L.},
  booktitle={2022 IEEE International Conference on Trust, Security and Privacy in Computing and Communications (TrustCom)}, 
  title={SCEVD: Semantic-enhanced Code Embedding for Vulnerability Discovery}, 
  year={2022},
  doi={10.1109/TrustCom56396.2022.00217}}


@INPROCEEDINGS{9603753,
  author={Wang, Z. and Guo, J. and Li, H.},
  booktitle={2021 International Conference on Computer Network, Electronic and Automation (ICCNEA)}, 
  title={Vulnerability Feature Extraction Model for Source Code Based on Deep Learning}, 
  year={2021},
  doi={10.1109/ICCNEA53019.2021.00016}}


@inproceedings{10.1145/3340422.3343639, author = {Kumar, L. and Hota, C. and Mahindru, A. and Neti, L. B. M.}, title = {Android Malware Prediction Using Extreme Learning Machine with Different Kernel Functions}, year = {2019}, isbn = {9781450368490}, url = {https://doi.org/10.1145/3340422.3343639}, doi = {10.1145/3340422.3343639}, abstract = {Android is currently the most popular smartphone platform which occupied 88\% of global sale by the end of 2nd quarter 2018. With the popularity of these applications, it is also inviting cybercriminals to develop malware application for accessing important information from smartphones. The major objective of cybercriminals to develop Malware apps or Malicious apps to threaten the organization privacy data, user privacy data, and device integrity. Early identification of such malware apps can help the android user to save private data and device integrity. In this study, features extracted from intermediate code representations obtained using decompilation of APK file are used for providing requisite input data to develop the models for predicting android malware applications. These models are trained using extreme learning with multiple kernel functions ans also compared with the model trained using most frequently used classifiers like linear regression, decision tree, polynomial regression, and logistic regression. This paper also focuses on the effectiveness of data sampling techniques for balancing data and feature selection methods for selecting right sets of significant uncorrelated metrics. The high-value of accuracy and AUC confirm the predicting capability of data sampling, sets of metrics, and training algorithms to malware and normal applications.}, booktitle = {Proceedings of the 15th Asian Internet Engineering Conference}, keywords = {Artificial neural network, Maintainability, Genetics algorithm, Parallel Computing, Object-Oriented Metrics}, series = {AINTEC '19} }


@INPROCEEDINGS{6606610,
  author={Shar, L. K. and Beng Kuan Tan, H. and Briand, L. C.},
  booktitle={2013 35th International Conference on Software Engineering (ICSE)}, 
  title={Mining SQL injection and cross site scripting vulnerabilities using hybrid program analysis}, 
  year={2013},
  doi={10.1109/ICSE.2013.6606610}}

@inproceedings{10.1145/3274694.3274744, author = {Allen, J. and Landen, M. and Chaba, S. and Ji, Y. and Chung, S. P. H. and Lee, W.}, title = {Improving Accuracy of Android Malware Detection with Lightweight Contextual Awareness}, year = {2018}, isbn = {9781450365697}, url = {https://doi.org/10.1145/3274694.3274744}, doi = {10.1145/3274694.3274744}, abstract = {In Android malware detection, recent work has shown that using contextual information of sensitive API invocation in the modeling of applications is able to improve the classification accuracy. However, the improvement brought by this context-awareness varies depending on how this information is used in the modeling. In this paper, we perform a comprehensive study on the effectiveness of using the contextual information in prior state-of-the-art detection systems. We find that this information has been "over-used" such that a large amount of non-essential metadata built into the models weakens the generalizability and longevity of the model, thus finally affects the detection accuracy. On the other hand, we find that the entrypoint of API invocation has the strongest impact on the classification correctness, which can further improve the accuracy if being properly captured. Based on this finding, we design and implement a lightweight, circumstance-aware detection system, named "PIKADROID" that only uses the API invocation and its entrypoint in the modeling. For extracting the meaningful entrypoints, PIKADROID applies a set of static analysis techniques to extract and sanitize the reachable entrypoints of a sensitive API, then constructs a frequency model for classification decision. In the evaluation, we show that this slim model significantly improves the detection accuracy on a data set of 23,631 applications by achieving an f-score of 97.41\%, while maintaining a false positive rating of 0.96\%.}, booktitle = {Proceedings of the 34th Annual Computer Security Applications Conference}, keywords = {Malware detection, Android Security}, series = {ACSAC '18} }



@inproceedings{10.1145/3564625.3567985, author = {Thapa, C. and Jang, S. I. and Ahmed, M. E. and Camtepe, S. and Pieprzyk, J. and Nepal, S.}, title = {Transformer-Based Language Models for Software Vulnerability Detection}, year = {2022}, isbn = {9781450397599}, url = {https://doi.org/10.1145/3564625.3567985}, doi = {10.1145/3564625.3567985}, abstract = {The large transformer-based language models demonstrate excellent performance in natural language processing. By considering the transferability of the knowledge gained by these models in one domain to other related domains, and the closeness of natural languages to high-level programming languages, such as C/C++, this work studies how to leverage (large) transformer-based language models in detecting software vulnerabilities and how good are these models for vulnerability detection tasks. In this regard, firstly, we present a systematic (cohesive) framework that details source code translation, model preparation, and inference. Then, we perform an empirical analysis of software vulnerability datasets of C/C++ source codes having multiple vulnerabilities corresponding to the library function call, pointer usage, array usage, and arithmetic expression. Our empirical results demonstrate the good performance of the language models in vulnerability detection. Moreover, these language models have better performance metrics, such as F1-score, than the contemporary models, namely bidirectional long short term memory and bidirectional gated recurrent unit. Experimenting with the language models is always challenging due to the requirement of computing resources, platforms, libraries, and dependencies. Thus, this paper also analyses the popular platforms to efficiently fine-tune these models and present recommendations while choosing the platforms for our framework.}, booktitle = {Proceedings of the 38th Annual Computer Security Applications Conference}, keywords = {Software vulnerability detection, transformer-based models, BERT, GPT-2}, series = {ACSAC '22} }
 


@inproceedings{10.1145/3230833.3230856, author = {Kronjee, J. and Hommersom, A. and Vranken, H.}, title = {Discovering Software Vulnerabilities Using Data-Flow Analysis and Machine Learning}, year = {2018}, isbn = {9781450364485}, url = {https://doi.org/10.1145/3230833.3230856}, doi = {10.1145/3230833.3230856}, abstract = {We present a novel method for static analysis in which we combine data-flow analysis with machine learning to detect SQL injection (SQLi) and Cross-Site Scripting (XSS) vulnerabilities in PHP applications. We assembled a dataset from the National Vulnerability Database and the SAMATE project, containing vulnerable PHP code samples and their patched versions in which the vulnerability is solved. We extracted features from the code samples by applying data-flow analysis techniques, including reaching definitions analysis, taint analysis, and reaching constants analysis. We used these features in machine learning to train various probabilistic classifiers. To demonstrate the effectiveness of our approach, we built a tool called WIRECAML, and compared our tool to other tools for vulnerability detection in PHP code. Our tool performed best for detecting both SQLi and XSS vulnerabilities. We also tried our approach on a number of open-source software applications, and found a previously unknown vulnerability in a photo-sharing web application.}, booktitle = {Proceedings of the 13th International Conference on Availability, Reliability and Security}, articleno = {6},  keywords = {machine learning, static code analysis, vulnerability detection, Software security, data-flow analysis}, series = {ARES '18} }
 

@inproceedings{10.1145/3264437.3264476, author = {Zegzhda, P. and Zegzhda, D. and Pavlenko, E. and Ignatev, G.}, title = {Applying Deep Learning Techniques for Android Malware Detection}, year = {2018}, isbn = {9781450366083}, url = {https://doi.org/10.1145/3264437.3264476}, doi = {10.1145/3264437.3264476}, abstract = {This article explores the use of deep learning for malware identification in the Android operating system. Similar studies are considered and, based on their drawbacks, a self-designed approach is proposed for representing an Android application for a convolutional neural network, which consists in constructing an RGB image, the pixels of which are formed from a sequence of pairs of API calls and protection levels. The results of the experimental evaluation of the proposed approach, which are presented in this paper, demonstrate its high efficiency for solving the problem of identifying malicious Android applications.}, booktitle = {Proceedings of the 11th International Conference on Security of Information and Networks}, articleno = {7}, keywords = {mobile security, Information security, Android application, deep learning, application analysis, malware detection, Android security, Android OS, malware, convolutional neural network}, series = {SIN '18} }

@inproceedings{duan_vulsniper_2019,
  title     = {VulSniper: Focus Your Attention to Shoot Fine-Grained Vulnerabilities},
  author    = {Duan, X. and Wu, J. and Ji, S. and Rui, Z. and Luo, T. and Yang, M. and Wu, Y.},
  booktitle = {Proceedings of the Twenty-Eighth International Joint Conference on
               Artificial Intelligence, {IJCAI-19}},
  year      = {2019},
  month     = {7},
  doi       = {10.24963/ijcai.2019/648},
  url       = {https://doi.org/10.24963/ijcai.2019/648},
}


@ARTICLE{9167194,
  author={Bilgin, Z. and Ersoy, M. A. and Soykan, E. U. and Tomur, E. and Çomak, P. and Karaçay, L.},
  journal={IEEE Access}, 
  title={Vulnerability Prediction From Source Code Using Machine Learning}, 
  year={2020},
  doi={10.1109/ACCESS.2020.3016774}}


@inproceedings{10.1145/3468264.3468597, author = {Li, Y. and Wang, S. and Nguyen, T. N.}, title = {Vulnerability Detection with Fine-Grained Interpretations}, year = {2021}, isbn = {9781450385626}, url = {https://doi.org/10.1145/3468264.3468597}, doi = {10.1145/3468264.3468597}, abstract = {Despite the successes of machine learning (ML) and deep learning (DL)-based vulnerability detectors (VD), they are limited to providing only the decision on whether a given code is vulnerable or not, without details on what part of the code is relevant to the detected vulnerability. We present IVDetect, an interpretable vulnerability detector with the philosophy of using Artificial Intelligence (AI) to detect vulnerabilities, while using Intelligence Assistant (IA) to provide VD interpretations in terms of vulnerable statements. For vulnerability detection, we separately consider the vulnerable statements and their surrounding contexts via data and control dependencies. This allows our model better discriminate vulnerable statements than using the mixture of vulnerable code and contextual code as in existing approaches. In addition to the coarse-grained vulnerability detection result, we leverage interpretable AI to provide users with fine-grained interpretations that include the sub-graph in the Program Dependency Graph (PDG) with the crucial statements that are relevant to the detected vulnerability. Our empirical evaluation on vulnerability databases shows that IVDetect outperforms the existing DL-based approaches by 43\%–84\% and 105\%–255\% in top-10 nDCG and MAP ranking scores. IVDetect correctly points out the vulnerable statements relevant to the vulnerability via its interpretation in 67\% of the cases with a top-5 ranked list. IVDetect improves over the baseline interpretation models by 12.3\%–400\% and 9\%–400\% in accuracy.}, booktitle = {Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering}, keywords = {Deep Learning, Explainable AI (XAI), Intelligence Assistant, Interpretable AI, Vulnerability Detection}, series = {ESEC/FSE 2021} }


@INPROCEEDINGS{8322752,
  author={Wu, F. and Wang, J. and Liu, J. and Wang, W.},
  booktitle={2017 3rd IEEE International Conference on Computer and Communications (ICCC)}, 
  title={Vulnerability detection with deep learning}, 
  year={2017},
  doi={10.1109/CompComm.2017.8322752}}


@INPROCEEDINGS{8599360,
  author={Xu, A. and Dai, T. and Chen, H. and Ming, Z. and Li, W.},
  booktitle={2018 5th International Conference on Systems and Informatics (ICSAI)}, 
  title={Vulnerability Detection for Source Code Using Contextual LSTM}, 
  year={2018},
  doi={10.1109/ICSAI.2018.8599360}}


@INPROCEEDINGS{8254428,
  author={Yang, L. and Li, X. and Yu, Y.},
  booktitle={GLOBECOM 2017 - 2017 IEEE Global Communications Conference}, 
  title={VulDigger: A Just-in-Time and Cost-Aware Tool for Digging Vulnerability-Contributing Changes}, 
  year={2017},
  doi={10.1109/GLOCOM.2017.8254428}}



@inproceedings{Li_vuldeepecker_2018,
	doi = {10.14722/ndss.2018.23158},
  
	url = {https://doi.org/10.14722%2Fndss.2018.23158},
  
	year = 2018,
  
	author = {Z. Li and D. Zou and S. Xu and X. Ou and H. Jin and S. Wang and Z. Deng and Y. Zhong},
  
	title = {{VulDeePecker}: A Deep Learning-Based System for Vulnerability Detection},
  
	booktitle = {Proceedings 2018 Network and Distributed System Security Symposium}
}

@ARTICLE{9416836,
  author={Li, Z. and Zou, D. and Xu, S. and Chen, Z. and Zhu, Y. and Jin, H.},
  journal={IEEE Transactions on Dependable and Secure Computing}, 
  title={VulDeeLocator: A Deep Learning-Based Fine-Grained Vulnerability Detector}, 
  year={2022},
  doi={10.1109/TDSC.2021.3076142}}


@inproceedings{10.1145/3510003.3510229, author = {Wu, Y. and Zou, D. and Dou, S. and Yang, W. and Xu, D. and Jin, H}, title = {VulCNN: An Image-Inspired Scalable Vulnerability Detection System}, year = {2022}, isbn = {9781450392211}, url = {https://doi.org/10.1145/3510003.3510229}, doi = {10.1145/3510003.3510229}, abstract = {Since deep learning (DL) can automatically learn features from source code, it has been widely used to detect source code vulnerability. To achieve scalable vulnerability scanning, some prior studies intend to process the source code directly by treating them as text. To achieve accurate vulnerability detection, other approaches consider distilling the program semantics into graph representations and using them to detect vulnerability. In practice, text-based techniques are scalable but not accurate due to the lack of program semantics. Graph-based methods are accurate but not scalable since graph analysis is typically time-consuming.In this paper, we aim to achieve both scalability and accuracy on scanning large-scale source code vulnerabilities. Inspired by existing DL-based image classification which has the ability to analyze millions of images accurately, we prefer to use these techniques to accomplish our purpose. Specifically, we propose a novel idea that can efficiently convert the source code of a function into an image while preserving the program details. We implement VulCNN and evaluate it on a dataset of 13,687 vulnerable functions and 26,970 non-vulnerable functions. Experimental results report that VulCNN can achieve better accuracy than eight state-of-the-art vulnerability detectors (i.e., Checkmarx, FlawFinder, RATS, TokenCNN, VulDeePecker, SySeVR, VulDeeLocator, and Devign). As for scalability, VulCNN is about four times faster than VulDeePecker and SySeVR, about 15 times faster than VulDeeLocator, and about six times faster than Devign. Furthermore, we conduct a case study on more than 25 million lines of code and the result indicates that VulCNN can detect large-scale vulnerability. Through the scanning reports, we finally discover 73 vulnerabilities that are not reported in NVD.}, booktitle = {Proceedings of the 44th International Conference on Software Engineering}, keywords = {vulnerability detection, large scale, image, CNN}, series = {ICSE '22} }
 


@INPROCEEDINGS{9825786,
  author={Ding, Y. and Suneja, S. and Zheng, Y. and Laredo, J. and Morari, A. and Kaiser, G. and Ray, B.},
  booktitle={2022 IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)}, 
  title={VELVET: a noVel Ensemble Learning approach to automatically locate VulnErable sTatements}, 
  year={2022},
  doi={10.1109/SANER53432.2022.00114}}


@inproceedings{10.1145/2810103.2813604, author = {Perl, H. and Dechand, S. and Smith, M. and Arp, D. and Yamaguchi, F. and Rieck, K. and Fahl, S. and Acar, Y.}, title = {VCCFinder: Finding Potential Vulnerabilities in Open-Source Projects to Assist Code Audits}, year = {2015}, isbn = {9781450338325}, url = {https://doi.org/10.1145/2810103.2813604}, doi = {10.1145/2810103.2813604}, abstract = {Despite the security community's best effort, the number of serious vulnerabilities discovered in software is increasing rapidly. In theory, security audits should find and remove the vulnerabilities before the code ever gets deployed. However, due to the enormous amount of code being produced, as well as a the lack of manpower and expertise, not all code is sufficiently audited. Thus, many vulnerabilities slip into production systems. A best-practice approach is to use a code metric analysis tool, such as Flawfinder, to flag potentially dangerous code so that it can receive special attention. However, because these tools have a very high false-positive rate, the manual effort needed to find vulnerabilities remains overwhelming. In this paper, we present a new method of finding potentially dangerous code in code repositories with a significantly lower false-positive rate than comparable systems. We combine code-metric analysis with metadata gathered from code repositories to help code review teams prioritize their work. The paper makes three contributions. First, we conducted the first large-scale mapping of CVEs to GitHub commits in order to create a vulnerable commit database. Second, based on this database, we trained a SVM classifier to flag suspicious commits. Compared to Flawfinder, our approach reduces the amount of false alarms by over 99 \% at the same level of recall. Finally, we present a thorough quantitative and qualitative analysis of our approach and discuss lessons learned from the results. We will share the database as a benchmark for future research and will also provide our analysis tool as a web service.}, booktitle = {Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security}, keywords = {static analysis, vulnerabilities, machine learning}, series = {CCS '15} }


@article{Chowdhury_using_2011,
title = {Using complexity, coupling, and cohesion metrics as early indicators of vulnerabilities},
journal = {Journal of Systems Architecture},
year = {2011},
note = {Special Issue on Security and Dependability Assurance of Software Architectures},
issn = {1383-7621},
doi = {https://doi.org/10.1016/j.sysarc.2010.06.003},
url = {https://www.sciencedirect.com/science/article/pii/S1383762110000615},
author = {I. Chowdhury and M. Zulkernine},
keywords = {Vulnerability prediction, Software metrics, Complexity, Coupling, Cohesion},
abstract = {Software security failures are common and the problem is growing. A vulnerability is a weakness in the software that, when exploited, causes a security failure. It is difficult to detect vulnerabilities until they manifest themselves as security failures in the operational stage of software, because security concerns are often not addressed or known sufficiently early during the software development life cycle. Numerous studies have shown that complexity, coupling, and cohesion (CCC) related structural metrics are important indicators of the quality of software architecture, and software architecture is one of the most important and early design decisions that influences the final quality of the software system. Although these metrics have been successfully employed to indicate software faults in general, there are no systematic guidelines on how to use these metrics to predict vulnerabilities in software. If CCC metrics can be used to indicate vulnerabilities, these metrics could aid in the conception of more secured architecture, leading to more secured design and code and eventually better software. In this paper, we present a framework to automatically predict vulnerabilities based on CCC metrics. To empirically validate the framework and prediction accuracy, we conduct a large empirical study on fifty-two releases of Mozilla Firefox developed over a period of four years. To build vulnerability predictors, we consider four alternative data mining and statistical techniques – C4.5 Decision Tree, Random Forests, Logistic Regression, and Naïve-Bayes – and compare their prediction performances. We are able to correctly predict majority of the vulnerability-prone files in Mozilla Firefox, with tolerable false positive rates. Moreover, the predictors built from the past releases can reliably predict the likelihood of having vulnerabilities in the future releases. The experimental results indicate that structural information from the non-security realm such as complexity, coupling, and cohesion are useful in vulnerability prediction.}
}

@ARTICLE{8970384,
  author={Qian, P. and Liu, Z. and He, Q. and Zimmermann, R. and Wang, X.},
  journal={IEEE Access}, 
  title={Towards Automated Reentrancy Detection for Smart Contracts Based on Sequential Models}, 
  year={2020},
  doi={10.1109/ACCESS.2020.2969429}}



@inproceedings{10.1145/2857705.2857720, author = {Grieco, G. and Grinblat, G. L. and Uzal, L. and Rawat, S. and Feist, J. and Mounier, L.}, title = {Toward Large-Scale Vulnerability Discovery Using Machine Learning}, year = {2016}, isbn = {9781450339353}, url = {https://doi.org/10.1145/2857705.2857720}, doi = {10.1145/2857705.2857720}, abstract = {With sustained growth of software complexity, finding security vulnerabilities in operating systems has become an important necessity. Nowadays, OS are shipped with thousands of binary executables. Unfortunately, methodologies and tools for an OS scale program testing within a limited time budget are still missing.In this paper we present an approach that uses lightweight static and dynamic features to predict if a test case is likely to contain a software vulnerability using machine learning techniques. To show the effectiveness of our approach, we set up a large experiment to detect easily exploitable memory corruptions using 1039 Debian programs obtained from its bug tracker, collected 138,308 unique execution traces and statically explored 76,083 different subsequences of function calls. We managed to predict with reasonable accuracy which programs contained dangerous memory corruptions.We also developed and implemented VDiscover, a tool that uses state-of-the-art Machine Learning techniques to predict vulnerabilities in test cases. Such tool will be released as open-source to encourage the research of vulnerability discovery at a large scale, together with VDiscovery, a public dataset that collects raw analyzed data.}, booktitle = {Proceedings of the Sixth ACM Conference on Data and Application Security and Privacy}, keywords = {vulnerability detection, static analysis, machine learning, dynamic analysis}, series = {CODASPY '16} }
 


@InProceedings{10.1007/978-3-030-68110-4_7,
author="Filus, K.
and Siavvas, M.
and Doma{\'{n}}ska, J.
and Gelenbe, E.",
title="The Random Neural Network as a Bonding Model for Software Vulnerability Prediction",
booktitle="Modelling, Analysis, and Simulation of Computer and Telecommunication Systems",
year="2021",
abstract="Software vulnerability prediction is an important and active area of research where new methods are needed to build accurate and efficient tools that can identify security issues. Thus we propose an approach based on mixed features that combines text mining features and the features generated using a Static Code Analyzer. We use a Random Neural Network as a bonding model that combines the text analysis that is carried out on software using a Convolutional Neural Network, and the outputs of Static Code Analysis. The proposed approach was evaluated on commonly used datasets and led to 97{\%} training accuracy, and 93{\%}--94{\%} testing accuracy, with a 1{\%} reduction in false positives with respect to previously published results on similar data sets.",
isbn="978-3-030-68110-4"
}

@ARTICLE{9321538,
  author={Li, Z. and Zou, D. and Xu, S. and Jin, H. and Zhu, Y. and Chen, Z.},
  journal={IEEE Transactions on Dependable and Secure Computing}, 
  title={SySeVR: A Framework for Using Deep Learning to Detect Software Vulnerabilities}, 
  year={2022},
  doi={10.1109/TDSC.2021.3051525}}


@inproceedings{10.1145/2517312.2517315, author = {Gascon, H. and Yamaguchi, F. and Arp, D. and Rieck, K.}, title = {Structural Detection of Android Malware Using Embedded Call Graphs}, year = {2013}, isbn = {9781450324885}, url = {https://doi.org/10.1145/2517312.2517315}, doi = {10.1145/2517312.2517315}, abstract = {The number of malicious applications targeting the Android system has literally exploded in recent years. While the security community, well aware of this fact, has proposed several methods for detection of Android malware, most of these are based on permission and API usage or the identification of expert features. Unfortunately, many of these approaches are susceptible to instruction level obfuscation techniques. Previous research on classic desktop malware has shown that some high level characteristics of the code, such as function call graphs, can be used to find similarities between samples while being more robust against certain obfuscation strategies. However, the identification of similarities in graphs is a non-trivial problem whose complexity hinders the use of these features for malware detection. In this paper, we explore how recent developments in machine learning classification of graphs can be efficiently applied to this problem. We propose a method for malware detection based on efficient embeddings of function call graphs with an explicit feature map inspired by a linear-time graph kernel. In an evaluation with 12,158 malware samples our method, purely based on structural features, outperforms several related approaches and detects 89\% of the malware with few false alarms, while also allowing to pin-point malicious code structures within Android applications.}, booktitle = {Proceedings of the 2013 ACM Workshop on Artificial Intelligence and Security}, keywords = {malware detection, machine learning, graph kernels}, series = {AISec '13} }
 

@INPROCEEDINGS{8882745,
  author={Cheng, X. and Wang, H. and Hua, J. and Zhang, M. and Xu, G. and Yi, L. and Sui, Y.},
  booktitle={2019 24th International Conference on Engineering of Complex Computer Systems (ICECCS)}, 
  title={Static Detection of Control-Flow-Related Vulnerabilities Using Graph Embedding}, 
  year={2019},
  doi={10.1109/ICECCS.2019.00012}}


@article{10.1145/3468854, author = {Zhou, Y. and Siow, J. K. and Wang, C. and Liu, S. and Liu, Y.}, title = {SPI: Automated Identification of Security Patches via Commits}, year = {2021}, issue_date = {January 2022}, issn = {1049-331X}, url = {https://doi.org/10.1145/3468854}, doi = {10.1145/3468854}, abstract = {Security patches in open source software, providing security fixes to identified vulnerabilities, are crucial in protecting against cyber attacks. Security advisories and announcements are often publicly released to inform the users about potential security vulnerability. Despite the National Vulnerability Database (NVD) publishes identified vulnerabilities, a vast majority of vulnerabilities and their corresponding security patches remain beyond public exposure, e.g., in the open source libraries that are heavily relied on by developers. As many of these patches exist in open sourced projects, the problem of curating and gathering security patches can be difficult due to their hidden nature. An extensive and complete security patches dataset could help end-users such as security companies, e.g., building a security knowledge base, or researcher, e.g., aiding in vulnerability research.To efficiently curate security patches including undisclosed patches at large scale and low cost, we propose a deep neural-network-based approach built upon commits of open source repositories. First, we design and build security patch datasets that include 38,291 security-related commits and 1,045 Common Vulnerabilities and Exposures (CVE) patches from four large-scale C programming language libraries. We manually verify each commit, among the 38,291 security-related commits, to determine if they are security related.We devise and implement a deep learning-based security patch identification system that consists of two composite neural networks: one commit-message neural network that utilizes pretrained word representations learned from our commits dataset and one code-revision neural network that takes code before revision and after revision and learns the distinction on the statement level. Our system leverages the power of the two networks for Security Patch Identification. Evaluation results show that our system significantly outperforms SVM and K-fold stacking algorithms. The result on the combined dataset achieves as high as 87.93\% F1-score and precision of 86.24\%.We deployed our pipeline and learned model in an industrial production environment to evaluate the generalization ability of our approach. The industrial dataset consists of 298,917 commits from 410 new libraries that range from a wide functionalities. Our experiment results and observation on the industrial dataset proved that our approach can identify security patches effectively among open sourced projects.}, journal = {ACM Trans. Softw. Eng. Methodol.}, month = {sep}, articleno = {13}, keywords = {Machine learning, software security, deep learning} }

@ARTICLE{8906156,
  author={Lin, G. and Zhang, J. and Luo, W. and Pan, L. and De Vel, O. and Montague, P. and Xiang, Y.},
  journal={IEEE Transactions on Dependable and Secure Computing}, 
  title={Software Vulnerability Discovery via Learning Multi-Domain Knowledge Bases}, 
  year={2021},
  doi={10.1109/TDSC.2019.2954088}}


@misc{zhuang2021software,
      title={Software Vulnerability Detection via Deep Learning over Disaggregated Code Graph Representation}, 
      author={Y. Zhuang and S. Suneja and V. Thost and G. Domeniconi and A. Morari and J. Laredo},
      year={2021},
      eprint={2109.03341},
      archivePrefix={arXiv},
      primaryClass={cs.AI}
}

@inproceedings{10.1145/2970276.2970343, author = {Ceccato, M. and Nguyen, C. D. and Appelt, D. and Briand, L. C.}, title = {SOFIA: An Automated Security Oracle for Black-Box Testing of SQL-Injection Vulnerabilities}, year = {2016}, isbn = {9781450338455}, url = {https://doi.org/10.1145/2970276.2970343}, doi = {10.1145/2970276.2970343}, abstract = {Security testing is a pivotal activity in engineering secure software. It consists of two phases: generating attack inputs to test the system, and assessing whether test executions expose any vulnerabilities. The latter phase is known as the security oracle problem. In this work, we present SOFIA, a Security Oracle for SQL-Injection Vulnerabilities. SOFIA is programming-language and source-code independent, and can be used with various attack generation tools. Moreover, because it does not rely on known attacks for learning, SOFIA is meant to also detect types of SQLi attacks that might be unknown at learning time. The oracle challenge is recast as a one-class classification problem where we learn to characterise legitimate SQL statements to accurately distinguish them from SQLi attack statements. We have carried out an experimental validation on six applications, among which two are large and widely-used. SOFIA was used to detect real SQLi vulnerabilities with inputs generated by three attack generation tools. The obtained results show that SOFIA is computationally fast and achieves a recall rate of 100\% (i.e., missing no attacks) with a low false positive rate (0.6\%).}, booktitle = {Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering}, keywords = {SQL-injection, Security oracle, Security testing}, series = {ASE '16} }


@inproceedings{Jeon_smartcondetect_2021,
  title={SmartConDetect: Highly Accurate Smart Contract Code Vulnerability Detection Mechanism using BERT},
  author={S. Jeon and G. Lee and H. Kim and S. S. Woo},
  year={2021},
  url={https://api.semanticscholar.org/CorpusID:237102485}
}

@misc{liu2021smart,
      title={Smart Contract Vulnerability Detection: From Pure Neural Network to Interpretable Graph Feature and Expert Pattern Fusion}, 
      author={Z. Liu and P. Qian and X. Wang and L. Zhu and Q. He and S. Ji},
      year={2021},
      eprint={2106.09282},
      archivePrefix={arXiv},
      primaryClass={cs.LG}
}


@inproceedings{zhuang_smart_2020,
  title     = {Smart Contract Vulnerability Detection using Graph Neural Network},
  author    = {Zhuang, Y. and Liu, Z. and Qian, P. and Liu, Q. and Wang, X. and He, Q.},
  booktitle = {Proceedings of the Twenty-Ninth International Joint Conference on
               Artificial Intelligence, {IJCAI-20}},
  editor    = {Christian Bessiere},
  year      = {2020},
  month     = {7},
  note      = {Main track},
  doi       = {10.24963/ijcai.2020/454},
  url       = {https://doi.org/10.24963/ijcai.2020/454},
}


@inproceedings{10.1145/3094243.3094245, author = {Pang, Y. and Xue, X. and Wang, H.}, title = {Predicting Vulnerable Software Components through Deep Neural Network}, year = {2017}, isbn = {9781450352321}, url = {https://doi.org/10.1145/3094243.3094245}, doi = {10.1145/3094243.3094245}, abstract = {Vulnerabilities need to be detected and removed from software. Although previous studies demonstrated the usefulness of employing prediction techniques in deciding about vulnerabilities of software components, the improvement of effectiveness of these prediction techniques is still a grand challenging research question. This paper employed a technique based on a deep neural network with rectifier linear units trained with stochastic gradient descent method and batch normalization, for predicting vulnerable software components. The features are defined as continuous sequences of tokens in source code files. Besides, a statistical feature selection algorithm is then employed to reduce the feature and search space. We evaluated the proposed technique based on some Java Android applications, and the results demonstrated that the proposed technique could predict vulnerable classes, i.e., software components, with high precision, accuracy and recall.}, booktitle = {Proceedings of the 2017 International Conference on Deep Learning Technologies}, keywords = {Android, deep learning, vulnerability prediction, neural network}, series = {ICDLT '17} }


@INPROCEEDINGS{9700296,
  author={Wu, H. and Zhang, Z. and Wang, S. and Lei, Y. and Lin, B. and Qin, Y. and Zhang, H. and Mao, X.},
  booktitle={2021 IEEE 32nd International Symposium on Software Reliability Engineering (ISSRE)}, 
  title={Peculiar: Smart Contract Vulnerability Detection Based on Crucial Data Flow Graph and Pre-training Techniques}, 
  year={2021},
  doi={10.1109/ISSRE52982.2021.00047}}


@article{ye_out_2019,
title = {Out-of-sample Node Representation Learning for Heterogeneous Graph in Real-time Android Malware Detection}, url = {https://par.nsf.gov/biblio/10135597}, DOI = {10.24963/ijcai.2019/576}, abstractNote = {The increasingly sophisticated Android malware calls for new defensive techniques that are capable of protecting mobile users against novel threats. In this paper, we first extract the runtime Application Programming Interface (API) call sequences from Android apps, and then analyze higher-level semantic relations within the ecosystem to comprehensively characterize the apps. To model different types of entities (i.e., app, API, device, signature, affiliation) and rich relations among them, we present a structured heterogeneous graph (HG) for modeling. To efficiently classify nodes (e.g., apps) in the constructed HG, we propose the HG-Learning method to first obtain in-sample node embeddings and then learn representations of out-of-sample nodes without rerunning/adjusting HG embeddings at the first attempt. We later design a deep neural network classifier taking the learned HG representations as inputs for real-time Android malware detection. Comprehensive experiments on large-scale and real sample collections from Tencent Security Lab are performed to compare various baselines. Promising results demonstrate that our developed system AiDroid which integrates our proposed method outperforms others in real-time Android malware detection.}, journal = {28th International Joint Conference on Artificial Intelligence (IJCAI)}, author = {Ye, Y. and Hou, S. and Chen, L. and Lei, J. and Wan, W. and Wang, J. and Xiong, Q. and Shao, F.}, }


@misc{coimbra2021using,
      title={On using distributed representations of source code for the detection of C security vulnerabilities}, 
      author={D. Coimbra and S. Reis and R. Abreu and C. Păsăreanu and H. Erdogmus},
      year={2021},
      eprint={2106.01367},
      archivePrefix={arXiv},
      primaryClass={cs.CR}
}

@article{Yan_new_2018,
title = {New deep learning method to detect code injection attacks on hybrid applications},
journal = {Journal of Systems and Software},
year = {2018},
issn = {0164-1212},
doi = {https://doi.org/10.1016/j.jss.2017.11.001},
url = {https://www.sciencedirect.com/science/article/pii/S0164121217302571},
author = {R. Yan and X. Xiao and G. Hu and S. Peng and Y. Jiang},
keywords = {Code injection, Hybrid application, Abstract syntax tree, Deep learning},
abstract = {Mobile phones are becoming increasingly pervasive. Among them, HTML5-based hybrid applications are more and more popular because of their portability on different systems. However these applications suffer from code injection attacks. In this paper, we construct a novel deep learning network, Hybrid Deep Learning Network (HDLN), and use it to detect these attacks. At first, based on our previous work, we extract more features from Abstract Syntax Tree (AST) of JavaScript and employ three methods to select key features. Then we get the feature vectors and train HDLN to distinguish vulnerable applications from normal ones. Finally thorough experiments are done to validate our methods. The results show our detection approach with HDLN achieves 97.55% in accuracy and 97.60% in AUC, which outperforms those with other traditional classifiers and gets higher average precision than other detection methods.}
}

@article{Ghaffarian_neural_2021,
title = {Neural software vulnerability analysis using rich intermediate graph representations of programs},
journal = {Information Sciences},
year = {2021},
issn = {0020-0255},
doi = {https://doi.org/10.1016/j.ins.2020.11.053},
url = {https://www.sciencedirect.com/science/article/pii/S0020025520311579},
author = {S. M. Ghaffarian and H. R. Shahriari},
keywords = {Automated vulnerability analysis, Software security vulnerability, Graph neural networks, Machine learning, Artificial neural networks},
abstract = {Security vulnerabilities are among the major concerns of modern software engineering. Successful results of machine learning techniques in various challenging applications have led to an emerging field of research to investigate the effectiveness of machine learning, and more recently, deep learning techniques, for the problem of software vulnerability analysis and discovery. In this paper, we explore the utilization of Graph Neural Networks as the latest trend and progress in the field of artificial neural networks. To this end, we propose an original neural vulnerability analysis approach, using customized intermediate graph representations of programs to train graph neural network models. Experimental results on a public suite of vulnerable programs show that the proposed approach is effective at the task of software vulnerability analysis. Additional empirical experiments answer complementary research questions about the proposed approach. In particular, we present experimental results for the challenging task of cross-project vulnerability analysis, with interesting insights on the capabilities of our novel approach. Furthermore, a software utility that was developed in the course of this study is also published as a further contribution to the research community.}
}

@ARTICLE{8672949,
  author={Wang, Y. and Wu, Z. and Wei, Q. and Wang, Q.},
  journal={IEEE Access}, 
  title={NeuFuzz: Efficient Fuzzing With Deep Neural Network}, 
  year={2019},
  doi={10.1109/ACCESS.2019.2903291}}


@misc{nguyen2022mando,
      title={MANDO: Multi-Level Heterogeneous Graph Embeddings for Fine-Grained Detection of Smart Contract Vulnerabilities}, 
      author={H. H. Nguyen and N.-M. Nguyen and C. Xie and Z. Ahmadi and D. Kudendo and T.-N. Doan and L. Jiang},
      year={2022},
      eprint={2208.13252},
      archivePrefix={arXiv},
      primaryClass={cs.SE}
}

@misc{mariconti2017mamadroid,
      title={MaMaDroid: Detecting Android Malware by Building Markov Chains of Behavioral Models}, 
      author={E. Mariconti and L. Onwuzurike and P. Andriotis and E. De Cristofaro and G. Ross and G. Stringhini},
      year={2017},
      eprint={1612.04433},
      archivePrefix={arXiv},
      primaryClass={cs.CR}
}

@misc{suneja2020learning,
      title={Learning to map source code to software vulnerability using code-as-a-graph}, 
      author={S. Suneja and Y. Zheng and Y. Zhuang and J. Laredo and A. Morari},
      year={2020},
      eprint={2006.08614},
      archivePrefix={arXiv},
      primaryClass={cs.SE}
}

@misc{sawadogo2020learning,
      title={Learning to Catch Security Patches}, 
      author={A. D. Sawadogo and T. F. Bissyandé and N. Moha and K. Allix and J. Klein and L. Li and Y. L. Traon},
      year={2020},
      eprint={2001.09148},
      archivePrefix={arXiv},
      primaryClass={cs.SE}
}

@INPROCEEDINGS{9054817,
  author={Naeem, H. and Alalfi, M. H.},
  booktitle={2020 IEEE 27th International Conference on Software Analysis, Evolution and Reengineering (SANER)}, 
  title={Identifying Vulnerable IoT Applications using Deep Learning}, 
  year={2020},
  doi={10.1109/SANER48275.2020.9054817}}


@INPROCEEDINGS{9825835,
  author={Nguyen-Truong, G. and Kang, H. J. and Lo, D. and Sharma, A. and Santosa, A. E. and Sharma, A. and Ang, M. Y.},
  booktitle={2022 IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)}, 
  title={HERMES: Using Commit-Issue Linking to Detect Vulnerability-Fixing Commits}, 
  year={2022},
  doi={10.1109/SANER53432.2022.00018}}


@INPROCEEDINGS{9750460,
  author={Zhou, L. and Huang, M. and Li, Y. and Nie, Y. and Li, J. and Liu, Y.},
  booktitle={2021 IEEE Sixth International Conference on Data Science in Cyberspace (DSC)}, 
  title={GraphEye: A Novel Solution for Detecting Vulnerable Functions Based on Graph Attention Network}, 
  year={2021},
  doi={10.1109/DSC53577.2021.00060}}


@INPROCEEDINGS{9678720,
  author={Zhou, J. and Pacheco, M. and Wan, Z. and Xia, X. and Lo, D. and Wang, Y. and Hassan, A. E.},
  booktitle={2021 36th IEEE/ACM International Conference on Automated Software Engineering (ASE)}, 
  title={Finding A Needle in a Haystack: Automated Mining of Silent Vulnerability Fixes}, 
  year={2021},
  doi={10.1109/ASE51524.2021.9678720}}


@misc{buratti2020exploring,
      title={Exploring Software Naturalness through Neural Language Models}, 
      author={L. Buratti and others},
      year={2020},
      eprint={2006.12641},
      archivePrefix={arXiv},
      primaryClass={cs.CL}
}

@inproceedings{10.1145/3457337.3457841, author = {Ashizawa, N. and Yanai, N. and Cruz, J. P. and Okamura, S.}, title = {Eth2Vec: Learning Contract-Wide Code Representations for Vulnerability Detection on Ethereum Smart Contracts}, year = {2021}, isbn = {9781450384001}, url = {https://doi-org.proxy.library.nd.edu/10.1145/3457337.3457841}, doi = {10.1145/3457337.3457841}, abstract = {Ethereum smart contracts are programs that run on the Ethereum blockchain, and many smart contract vulnerabilities have been discovered in the past decade. Many security analysis tools have been created to detect such vulnerabilities, but their performance decreases drastically when codes to be analyzed are being rewritten. In this paper, we propose Eth2Vec, a machine-learning-based static analysis tool for vulnerability detection in smart contracts. It is also robust against code rewrites, i.e., it can detect vulnerabilities even in rewritten codes. Existing machine-learning-based static analysis tools for vulnerability detection need features, which analysts create manually, as inputs. In contrast, Eth2Vec automatically learns features of vulnerable Ethereum Virtual Machine (EVM) bytecodes with tacit knowledge through a neural network for natural language processing. Therefore, Eth2Vec can detect vulnerabilities in smart contracts by comparing the code similarity between target EVM bytecodes and the EVM bytecodes it already learned. We conducted experiments with existing open databases, such as Etherscan, and our results show that Eth2Vec outperforms a recent model based on support vector machine in terms of well-known metrics, i.e., precision, recall, and F1-score.}, booktitle = {Proceedings of the 3rd ACM International Symposium on Blockchain and Secure Critical Infrastructure}, keywords = {ethereum, smart contracts, vulnerability detection, neural networks, static analysis, code similarity}, series = {BSCI '21} }
 


@misc{choi2017endtoend,
      title={End-to-End Prediction of Buffer Overruns from Raw Source Code via Neural Memory Networks}, 
      author={M.-J. Choi and S. Jeong and H. Oh and J. Choo},
      year={2017},
      eprint={1703.02458},
      archivePrefix={arXiv},
      primaryClass={cs.SE}
}



@InProceedings{Yang_droidminer_2014,
author="Yang, C.
and Xu, Z.
and Gu, G.
and Yegneswaran, V.
and Porras, P.",
title="DroidMiner: Automated Mining and Characterization of Fine-grained Malicious Behaviors in Android Applications",
booktitle="Computer Security - ESORICS 2014",
year="2014",
abstract="Most existing malicious Android app detection approaches rely on manually selected detection heuristics, features, and models. In this paper, we describe a new, complementary system, called DroidMiner, which uses static analysis to automatically mine malicious program logic from known Android malware, abstracts this logic into a sequence of threat modalities, and then seeks out these threat modality patterns in other unknown (or newly published) Android apps. We formalize a two-level behavioral graph representation used to capture Android app program logic, and design new techniques to identify and label elements of the graph that capture malicious behavioral patterns (or malicious modalities). After the automatic learning of these malicious behavioral models, DroidMiner can scan a new Android app to (i) determine whether it contains malicious modalities, (ii) diagnose the malware family to which it is most closely associated, (iii) and provide further evidence as to why the app is considered to be malicious by including a concise description of identified malicious behaviors. We evaluate DroidMiner using 2,466 malicious apps, identified from a corpus of over 67,000 third-party market Android apps, plus an additional set of over 10,000 official market Android apps. Using this set of real-world apps, we demonstrate that DroidMiner achieves a 95.3{\%} detection rate, with only a 0.4{\%} false positive rate. We further evaluate DroidMiner's ability to classify malicious apps under their proper family labels, and measure its label accuracy at 92{\%}.",
isbn="978-3-319-11203-9"
}


@inproceedings{zhou_devign_2019,
 author = {Zhou, Y. and Liu, S. and Siow, J. and Du, X. and Liu, Y.},
 booktitle = {Advances in Neural Information Processing Systems},
 title = {Devign: Effective Vulnerability Identification by Learning Comprehensive Program Semantics via Graph Neural Networks},
 url = {https://proceedings.neurips.cc/paper_files/paper/2019/file/49265d2447bc3bbfe9e76306ce40a31f-Paper.pdf},
 year = {2019}
}

@inproceedings{10.1145/3412841.3442132, author = {Rabheru, R. and Hanif, H. and Maffeis, S.}, title = {DeepTective: Detection of PHP Vulnerabilities Using Hybrid Graph Neural Networks}, year = {2021}, isbn = {9781450381048}, url = {https://doi.org/10.1145/3412841.3442132}, doi = {10.1145/3412841.3442132}, abstract = {This paper presents DeepTective, a deep learning-based approach to detect vulnerabilities in PHP source code. DeepTective implements a novel hybrid technique that combines Gated Recurrent Units and Graph Convolutional Networks to detect SQLi, XSS and OSCI vulnerabilities leveraging both syntactic and semantic information. Experimental results show that our model outperformed related solutions on both synthetic and realistic datasets, and was able to discover 4 novel vulnerabilities in established WordPress plugins.}, booktitle = {Proceedings of the 36th Annual ACM Symposium on Applied Computing}, series = {SAC '21} }
 


@ARTICLE{8930093,
  author={Liu, S. and Lin, G. and Han, Q.-L. and Wen, S. and Zhang, J. and Xiang, Y.},
  journal={IEEE Transactions on Fuzzy Systems}, 
  title={DeepBalance: Deep-Learning and Fuzzy Oversampling for Vulnerability Detection}, 
  year={2020},
  doi={10.1109/TFUZZ.2019.2958558}}


@INPROCEEDINGS{8851923,
  author={Nguyen, V. and Le, T. and Le, T. and Nguyen, K. and DeVel, O. and Montague, P. and Qu, L. and Phung, D.},
  booktitle={2019 International Joint Conference on Neural Networks (IJCNN)}, 
  title={Deep Domain Adaptation for Vulnerable Code Function Identification}, 
  year={2019},
  doi={10.1109/IJCNN.2019.8851923}}


@INPROCEEDINGS{8686548,
  author={Xiaomeng, W. and Tao, Z. and Runpu, W. and Wei, X. and Changyu, H.},
  booktitle={2018 10th International Conference on Advanced Infocomm Technology (ICAIT)}, 
  title={CPGVA: Code Property Graph based Vulnerability Analysis by Deep Learning}, 
  year={2018},
  doi={10.1109/ICAIT.2018.8686548}}


@misc{narayanan2017contextaware,
      title={Context-aware, Adaptive and Scalable Android Malware Detection through Online Learning (extended version)}, 
      author={A. Narayanan and M. Chandramohan and L. Chen and Y. Liu},
      year={2017},
      eprint={1706.00947},
      archivePrefix={arXiv},
      primaryClass={cs.CR}
}

@ARTICLE{9293321,
  author={Wang, H. and Ye, G. and Tang, Z. and Tan, S. H. and Huang, S. and Fang, D. and Feng, Y. and Bian, L. and Wang, Z.},
  journal={IEEE Transactions on Information Forensics and Security}, 
  title={Combining Graph-Based Learning With Automated Data Collection for Code Vulnerability Detection}, 
  year={2021},
  doi={10.1109/TIFS.2020.3044773}}


@ARTICLE{9477066,
  author={Liu, Z. and Qian, P. and Wang, X. and Zhuang, Y. and Qiu, L. and Wang, X.},
  journal={IEEE Transactions on Knowledge and Data Engineering}, 
  title={Combining Graph Neural Networks With Expert Knowledge for Smart Contract Vulnerability Detection}, 
  year={2023},
  doi={10.1109/TKDE.2021.3095196}}


@INPROCEEDINGS{8823747,
  author={Ferenc, R. and Hegedűs, P. and Gyimesi, P. and Antal, G. and Bán, D. and Gyimóthy, T.},
  booktitle={2019 IEEE/ACM 7th International Workshop on Realizing Artificial Intelligence Synergies in Software Engineering (RAISE)}, 
  title={Challenging Machine Learning Algorithms in Predicting Vulnerable JavaScript Functions}, 
  year={2019},
  doi={10.1109/RAISE.2019.00010}}


@article{Cao_bgnn4vd_2021,
title = {BGNN4VD: Constructing Bidirectional Graph Neural-Network for Vulnerability Detection},
journal = {Information and Software Technology},
year = {2021},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2021.106576},
url = {https://www.sciencedirect.com/science/article/pii/S0950584921000586},
author = {S. Cao and X. Sun and L. Bo and Y. Wei and B. Li},
keywords = {Vulnerability detection, Bidirectional Graph Neural-Network, Code representation},
abstract = {Context:
Previous studies have shown that existing deep learning-based approaches can significantly improve the performance of vulnerability detection. They represent code in various forms and mine vulnerability features with deep learning models. However, the differences of code representation forms and deep learning models make various approaches still have some limitations. In practice, their false-positive rate (FPR) and false-negative rate (FNR) are still high.
Objective:
To address the limitations of existing deep learning-based vulnerability detection approaches, we propose BGNN4VD (Bidirectional Graph Neural Network for Vulnerability Detection), a vulnerability detection approach by constructing a Bidirectional Graph Neural-Network (BGNN).
Method:
In Phase 1, we extract the syntax and semantic information of source code through abstract syntax tree (AST), control flow graph (CFG), and data flow graph (DFG). Then in Phase 2, we use vectorized source code as input to Bidirectional Graph Neural-Network (BGNN). In Phase 3, we learn the different features between vulnerable code and non-vulnerable code by introducing backward edges on the basis of traditional Graph Neural-Network (GNN). Finally in Phase 4, a Convolutional Neural-Network (CNN) is used to further extract features and detect vulnerabilities through a classifier.
Results:
We evaluate BGNN4VD on four popular C/C++ projects from NVD and GitHub, and compare it with four state-of-the-art (Flawfinder, RATS, SySeVR, and VUDDY) vulnerab ility detection approaches. Experiment results show that, when compared these baselines, BGNN4VD achieves 4.9%, 11.0%, and 8.4% improvement in F1-measure, accuracy and precision, respectively.
Conclusion:
The proposed BGNN4VD achieves a higher precision and accuracy than the state-of-the-art methods. In addition, when applied on the latest vulnerabilities reported by CVE, BGNN4VD can still achieve a precision at 45.1%, which demonstrates the feasibility of BGNN4VD in practical application.}
}

@INPROCEEDINGS{9529451,
  author={Partenza, G. and Amburgey, T. and Deng, L. and Dehlinger, J. and Chakraborty, S.},
  booktitle={2021 IEEE 45th Annual Computers, Software, and Applications Conference (COMPSAC)}, 
  title={Automatic Identification of Vulnerable Code: Investigations with an AST-Based Neural Network}, 
  year={2021},
  doi={10.1109/COMPSAC51774.2021.00219}}



@Article{Li_automated_2020,
AUTHOR = {Li, X. and Wang, L. and Xin, Y. and Yang, Y. and Chen, Y.},
TITLE = {Automated Vulnerability Detection in Source Code Using Minimum Intermediate Representation Learning},
JOURNAL = {Applied Sciences},
YEAR = {2020},
ARTICLE-NUMBER = {1692},
URL = {https://www.mdpi.com/2076-3417/10/5/1692},
ISSN = {2076-3417},
ABSTRACT = {Vulnerability is one of the root causes of network intrusion. An effective way to mitigate security threats is to discover and patch vulnerabilities before an attack. Traditional vulnerability detection methods rely on manual participation and incur a high false positive rate. The intelligent vulnerability detection methods suffer from the problems of long-term dependence, out of vocabulary, coarse detection granularity and lack of vulnerable samples. This paper proposes an automated and intelligent vulnerability detection method in source code based on the minimum intermediate representation learning. First, the sample in the form of source code is transformed into a minimum intermediate representation to exclude the irrelevant items and reduce the length of the dependency. Next, the intermediate representation is transformed into a real value vector through pre-training on an extended corpus, and the structure and semantic information are retained. Then, the vector is fed to three concatenated convolutional neural networks to obtain high-level features of vulnerability. Last, a classifier is trained using the learned features. To validate this vulnerability detection method, an experiment was performed. The empirical results confirmed that compared with the traditional methods and the state-of-the-art intelligent methods, our method has a better performance with fine granularity.},
DOI = {10.3390/app10051692}
}

@INPROCEEDINGS{8614145,
  author={Russell, R. and Kim, L. and Hamilton, L. and Lazovich, T. and Harer, J. and Ozdemir, O. and Ellingwood, P. and McConley, M.},
  booktitle={2018 17th IEEE International Conference on Machine Learning and Applications (ICMLA)}, 
  title={Automated Vulnerability Detection in Source Code Using Deep Representation Learning}, 
  year={2018},
  doi={10.1109/ICMLA.2018.00120}}


@misc{harer2018automated,
      title={Automated software vulnerability detection with machine learning}, 
      author={J. A. Harer and others},
      year={2018},
      eprint={1803.04497},
      archivePrefix={arXiv},
      primaryClass={cs.SE}
}

@INPROCEEDINGS{8816739,
  author={Le, T. H. M. and Sabir, B. and Babar, M. A.},
  booktitle={2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR)}, 
  title={Automated Software Vulnerability Assessment with Concept Drift}, 
  year={2019},
  doi={10.1109/MSR.2019.00063}}


@INPROCEEDINGS{7727508,
  author={Narayanan, A. and Yang, L. and Chen, L. and Jinliang, L.},
  booktitle={2016 International Joint Conference on Neural Networks (IJCNN)}, 
  title={Adaptive and scalable Android malware detection through online learning}, 
  year={2016},
  doi={10.1109/IJCNN.2016.7727508}}


@ARTICLE{6894210,
  author={Cen, L. and Gates, C. S. and Si, L. and Li, N.},
  journal={IEEE Transactions on Dependable and Secure Computing}, 
  title={A Probabilistic Discriminative Model for Android Malware Detection with Decompiled Source Code}, 
  year={2015},
  doi={10.1109/TDSC.2014.2355839}}


@INPROCEEDINGS{8530068,
  author={Sabetta, A. and Bezzi, M.},
  booktitle={2018 IEEE International Conference on Software Maintenance and Evolution (ICSME)}, 
  title={A Practical Approach to the Automatic Classification of Security-Relevant Commits}, 
  year={2018},
  doi={10.1109/ICSME.2018.00058}}


@inproceedings{cheng_path-sensitive_2022, author = {Cheng, X. and Zhang, G. and Wang, H. and Sui, Y.}, title = {Path-Sensitive Code Embedding via Contrastive Learning for Software Vulnerability Detection}, year = {2022}, isbn = {9781450393799}, url = {https://doi.org/10.1145/3533767.3534371}, doi = {10.1145/3533767.3534371}, abstract = {Machine learning and its promising branch deep learning have shown success in a wide range of application domains. Recently, much effort has been expended on applying deep learning techniques (e.g., graph neural networks) to static vulnerability detection as an alternative to conventional bug detection methods. To obtain the structural information of code, current learning approaches typically abstract a program in the form of graphs (e.g., data-flow graphs, abstract syntax trees), and then train an underlying classification model based on the (sub)graphs of safe and vulnerable code fragments for vulnerability prediction. However, these models are still insufficient for precise bug detection, because the objective of these models is to produce classification results rather than comprehending the semantics of vulnerabilities, e.g., pinpoint bug triggering paths, which are essential for static bug detection. This paper presents ContraFlow, a selective yet precise contrastive value-flow embedding approach to statically detect software vulnerabilities. The novelty of ContraFlow lies in selecting and preserving feasible value-flow (aka program dependence) paths through a pretrained path embedding model using self-supervised contrastive learning, thus significantly reducing the amount of labeled data required for training expensive downstream models for path-based vulnerability detection. We evaluated ContraFlow using 288 real-world projects by comparing eight recent learning-based approaches. ContraFlow outperforms these eight baselines by up to 334.1\%, 317.9\%, 58.3\% for informedness, markedness and F1 Score, and achieves up to 450.0\%, 192.3\%, 450.0\% improvement for mean statement recall, mean statement precision and mean IoU respectively in terms of locating buggy statements.}, booktitle = {Proceedings of the 31st ACM SIGSOFT International Symposium on Software Testing and Analysis}, keywords = {Path sensitive, code embedding, contrastive learning, vulnerabilities}, series = {ISSTA 2022} }
 

@inproceedings{minh_le_deepcva_2021, author = {Le, T. H. M. and Hin, D. and Croft, R. and Babar, M. A.}, title = {DeepCVA: Automated Commit-Level Vulnerability Assessment with Deep Multi-Task Learning}, year = {2022}, isbn = {9781665403375}, url = {https://doi.org/10.1109/ASE51524.2021.9678622}, doi = {10.1109/ASE51524.2021.9678622}, abstract = {It is increasingly suggested to identify Software Vulnerabilities (SVs) in code commits to give early warnings about potential security risks. However, there is a lack of effort to assess vulnerability-contributing commits right after they are detected to provide timely information about the exploitability, impact and severity of SVs. Such information is important to plan and prioritize the mitigation for the identified SVs. We propose a novel Deep multi-task learning model, DeepCVA, to automate seven Commit-level Vulnerability Assessment tasks simultaneously based on Common Vulnerability Scoring System (CVSS) metrics. We conduct large-scale experiments on 1,229 vulnerability-contributing commits containing 542 different SVs in 246 real-world software projects to evaluate the effectiveness and efficiency of our model. We show that DeepCVA is the best-performing model with 38\% to 59.8\% higher Matthews Correlation Coefficient than many supervised and unsupervised baseline models. DeepCVA also requires 6.3 times less training and validation time than seven cumulative assessment models, leading to significantly less model maintenance cost as well. Overall, DeepCVA presents the first effective and efficient solution to automatically assess SVs early in software systems.}, booktitle = {Proceedings of the 36th IEEE/ACM International Conference on Automated Software Engineering}, keywords = {vulnerability assessment, deep learning, multi-task learning, software vulnerability, mining software repositories, software security}, series = {ASE '21} }


@ARTICLE{54,
  author={Dam, H. K. and Tran, T. and Pham, T. and Ng, S. W. and Grundy, J. and Ghose, A.},
  journal={IEEE Transactions on Software Engineering}, 
  title={Automatic Feature Learning for Predicting Vulnerable Software Components}, 
  year={2021},
  doi={10.1109/TSE.2018.2881961}}


@INPROCEEDINGS{9892280,
  author={Hanif, H. and Maffeis, S.},
  booktitle={2022 International Joint Conference on Neural Networks (IJCNN)}, 
  title={VulBERTa: Simplified Source Code Pre-Training for Vulnerability Detection}, 
  year={2022},
  doi={10.1109/IJCNN55064.2022.9892280}}

@INPROCEEDINGS{9426055,
  author={Zheng, W. and Abdallah Semasaba, A. O. and Wu, X. and Agyemang, S. A. and Liu, T. and Ge, Y.},
  booktitle={2021 IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)}, 
  title={Representation vs. Model: What Matters Most for Source Code Vulnerability Detection}, 
  year={2021},
  doi={10.1109/SANER50967.2021.00082}}


@INPROCEEDINGS{9356194,
  author={Rodrigues, G. E. de P. and Braga, A. M. and Dahab, R.},
  booktitle={2020 19th IEEE International Conference on Machine Learning and Applications (ICMLA)}, 
  title={Using Graph Embeddings and Machine Learning to Detect Cryptography Misuse in Source Code}, 
  year={2020},
  doi={10.1109/ICMLA51294.2020.00171}}


@INPROCEEDINGS{9462962,
  author={Mazuera-Rozo, A. and Mojica-Hanke, A. and Linares-Vásquez, M. and Bavota, G.},
  booktitle={2021 IEEE/ACM 29th International Conference on Program Comprehension (ICPC)}, 
  title={Shallow or Deep? An Empirical Study on Detecting Vulnerabilities using Deep Learning}, 
  year={2021},
  doi={10.1109/ICPC52881.2021.00034}}


@INPROCEEDINGS{9392984,
  author={Mosolygó, B. and Vándor, N. and Antal, G. and Hegedűs, P. and Ferenc, R.},
  booktitle={2021 International Conference on Code Quality (ICCQ)}, 
  title={Towards a Prototype Based Explainable JavaScript Vulnerability Prediction Model}, 
  year={2021},
  doi={10.1109/ICCQ51190.2021.9392984}}


@INPROCEEDINGS{9712091,
  author={Wang, B. and Chu, H. and Zhang, P. and Dong, H.},
  booktitle={2021 28th Asia-Pacific Software Engineering Conference (APSEC)}, 
  title={Smart Contract Vulnerability Detection Using Code Representation Fusion}, 
  year={2021},
  doi={10.1109/APSEC53868.2021.00069}}


@INPROCEEDINGS{fu_linevul_2022,
  author={Fu, M. and Tantithamthavorn, C.},
  booktitle={2022 IEEE/ACM 19th International Conference on Mining Software Repositories (MSR)}, 
  title={LineVul: A Transformer-based Line-Level Vulnerability Prediction}, 
  year={2022},
  doi={10.1145/3524842.3528452}}

@inproceedings{nguyen_regvd_2022, author = {Nguyen, V.-A. and Nguyen, D. Q. and Nguyen, V. and Le, T. and Tran, Q. H. and Phung, D.}, title = {ReGVD: Revisiting Graph Neural Networks for Vulnerability Detection}, year = {2022}, isbn = {9781450392235}, url = {https://doi.org/10.1145/3510454.3516865}, doi = {10.1145/3510454.3516865}, abstract = {Identifying vulnerabilities in the source code is essential to protect the software systems from cyber security attacks. It, however, is also a challenging step that requires specialized expertise in security and code representation. To this end, we aim to develop a general, practical, and programming language-independent model capable of running on various source codes and libraries without difficulty. Therefore, we consider vulnerability detection as an inductive text classification problem and propose ReGVD, a simple yet effective graph neural network-based model for the problem. In particular, ReGVD views each raw source code as a flat sequence of tokens to build a graph, wherein node features are initialized by only the token embedding layer of a pre-trained programming language (PL) model. ReGVD then leverages residual connection among GNN layers and examines a mixture of graph-level sum and max poolings to return a graph embedding for the source code. ReGVD outperforms the existing state-of-the-art models and obtains the highest accuracy on the real-world benchmark dataset from CodeXGLUE for vulnerability detection. Our code is available at: https://github.com/daiquocnguyen/GNN-ReGVD.}, booktitle = {Proceedings of the ACM/IEEE 44th International Conference on Software Engineering: Companion Proceedings}, keywords = {security, graph neural networks, text classification, vulnerability detection}, series = {ICSE '22} }


@inproceedings{nguyen_mando-guru_2022, author = {Nguyen, H. H. and Nguyen, N.-M. and Doan, H.-P. and Ahmadi, Z. and Doan, T.-N. and Jiang, L.}, title = {MANDO-GURU: Vulnerability Detection for Smart Contract Source Code by Heterogeneous Graph Embeddings}, year = {2022}, isbn = {9781450394130}, url = {https://doi.org/10.1145/3540250.3558927}, doi = {10.1145/3540250.3558927}, abstract = {Smart contracts are increasingly used with blockchain systems for high-value applications. It is highly desired to ensure the quality of smart contract source code before they are deployed. This paper proposes a new deep learning-based tool, MANDO-GURU, that aims to accurately detect vulnerabilities in smart contracts at both coarse-grained contract-level and fine-grained line-level. Using a combination of control-flow graphs and call graphs of Solidity code, we design new heterogeneous graph attention neural networks to encode more structural and potentially semantic relations among different types of nodes and edges of such graphs and use the encoded embeddings of the graphs and nodes to detect vulnerabilities. Our validation of real-world smart contract datasets shows that MANDO-GURU can significantly improve many other vulnerability detection techniques by up to 24\% in terms of the F1-score at the contract level, depending on vulnerability types. It is the first learning-based tool for Ethereum smart contracts that identify vulnerabilities at the line level and significantly improves the traditional code analysis-based techniques by up to 63.4\%. Our tool is publicly available at https://github.com/MANDO-Project/ge-sc-machine. A test version is currently deployed at http://mandoguru.com, and a demo video of our tool is available at http://mandoguru.com/demo-video.}, booktitle = {Proceedings of the 30th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering}, keywords = {smart contracts, vulnerability detection, Ethereum blockchain, graph neural networks, heterogeneous graphs}, series = {ESEC/FSE 2022} }

@inproceedings{al_debeyan_improving_2022, author = {Al Debeyan, F. and Hall, T. and Bowes, D.}, title = {Improving the Performance of Code Vulnerability Prediction Using Abstract Syntax Tree Information}, year = {2022}, isbn = {9781450398602}, url = {https://doi.org/10.1145/3558489.3559066}, doi = {10.1145/3558489.3559066}, abstract = {The recent emergence of the Log4jshell vulnerability demonstrates the importance of detecting code vulnerabilities in software systems. Software Vulnerability Prediction Models (VPMs) are a promising tool for vulnerability detection. Recent studies have focused on improving the performance of models to predict whether a piece of code is vulnerable or not (binary classification). However, such approaches are limited because they do not provide developers with information on the type of vulnerability that needs to be patched. We present our multiclass classification approach to improve the performance of vulnerability prediction models. Our approach uses abstract syntax tree n-grams to identify code clusters related to specific vulnerabilities. We evaluated our approach using real-world Java software vulnerability data. We report increased predictive performance compared to a variety of other models, for example, F-measure increases from 55\% to 75\% and MCC increases from 48\% to 74\%. Our results suggest that clustering software vulnerabilities using AST n-gram information is a promising approach to improve vulnerability prediction and enable specific information about the vulnerability type to be provided.}, booktitle = {Proceedings of the 18th International Conference on Predictive Models and Data Analytics in Software Engineering}, keywords = {Software Vulnerability, Software Security, Machine learning}, series = {PROMISE 2022} }

@inproceedings{hin_linevd_2022, author = {Hin, D. and Kan, A. and Chen, H. and Babar, M. A.}, title = {LineVD: Statement-Level Vulnerability Detection Using Graph Neural Networks}, year = {2022}, isbn = {9781450393034}, url = {https://doi.org/10.1145/3524842.3527949}, doi = {10.1145/3524842.3527949}, abstract = {Current machine-learning based software vulnerability detection methods are primarily conducted at the function-level. However, a key limitation of these methods is that they do not indicate the specific lines of code contributing to vulnerabilities. This limits the ability of developers to efficiently inspect and interpret the predictions from a learnt model, which is crucial for integrating machine-learning based tools into the software development work-flow. Graph-based models have shown promising performance in function-level vulnerability detection, but their capability for statement-level vulnerability detection has not been extensively explored. While interpreting function-level predictions through explainable AI is one promising direction, we herein consider the statement-level software vulnerability detection task from a fully supervised learning perspective. We propose a novel deep learning framework, LineVD, which formulates statement-level vulnerability detection as a node classification task. LineVD leverages control and data dependencies between statements using graph neural networks, and a transformer-based model to encode the raw source code tokens. In particular, by addressing the conflicting outputs between function-level and statement-level information, LineVD significantly improve the prediction performance without vulnerability status for function code. We have conducted extensive experiments against a large-scale collection of real-world C/C++ vulnerabilities obtained from multiple real-world projects, and demonstrate an increase of 105\% in F1-score over the current state-of-the-art.}, booktitle = {Proceedings of the 19th International Conference on Mining Software Repositories}, keywords = {software vulnerability detection, deep learning, program representation}, series = {MSR '22} }

@inproceedings{nguyen_vulcurator_2022, author = {Nguyen, T. G. and Le-Cong, T. and Kang, H. J. and Le, X.-B. D. and Lo, D.}, title = {VulCurator: A Vulnerability-Fixing Commit Detector}, year = {2022}, isbn = {9781450394130}, url = {https://doi.org/10.1145/3540250.3558936}, doi = {10.1145/3540250.3558936}, abstract = {Open-source software (OSS) vulnerability management process is important nowadays, as the number of discovered OSS vulnerabilities is increasing over time. Monitoring vulnerability-fixing commits is a part of the standard process to prevent vulnerability exploitation. Manually detecting vulnerability-fixing commits is, however, time-consuming due to the possibly large number of commits to review. Recently, many techniques have been proposed to automatically detect vulnerability-fixing commits using machine learning. These solutions either: (1) did not use deep learning, or (2) use deep learning on only limited sources of information. This paper proposes VulCurator, a tool that leverages deep learning on richer sources of information, including commit messages, code changes and issue reports for vulnerability-fixing commit classification. Our experimental results show that VulCurator outperforms the state-of-the-art baselines up to 16.1\% in terms of F1-score. VulCurator tool is publicly available at https://github.com/ntgiang71096/VFDetector and https://zenodo.org/record/7034132# .Yw3MN-xBzDI, with a demo video at https://youtu.be/uMlFmWSJYOE}, booktitle = {Proceedings of the 30th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering}, keywords = {BERT, Vulnerability-Fixing Commits, Deep Learning}, series = {ESEC/FSE 2022} }

@article{cheng_deepwukong_2021, author = {Cheng, X. and Wang, H. and Hua, J. and Xu, G. and Sui, Y.}, title = {DeepWukong: Statically Detecting Software Vulnerabilities Using Deep Graph Neural Network}, year = {2021}, issue_date = {July 2021}, issn = {1049-331X}, url = {https://doi.org/10.1145/3436877}, doi = {10.1145/3436877}, abstract = {Static bug detection has shown its effectiveness in detecting well-defined memory errors, e.g., memory leaks, buffer overflows, and null dereference. However, modern software systems have a wide variety of vulnerabilities. These vulnerabilities are extremely complicated with sophisticated programming logic, and these bugs are often caused by different bad programming practices, challenging existing bug detection solutions. It is hard and labor-intensive to develop precise and efficient static analysis solutions for different types of vulnerabilities, particularly for those that may not have a clear specification as the traditional well-defined vulnerabilities.This article presents DeepWukong, a new deep-learning-based embedding approach to static detection of software vulnerabilities for C/C++ programs. Our approach makes a new attempt by leveraging advanced recent graph neural networks to embed code fragments in a compact and low-dimensional representation, producing a new code representation that preserves high-level programming logic (in the form of control- and data-flows) together with the natural language information of a program. Our evaluation studies the top 10 most common C/C++ vulnerabilities during the past 3 years. We have conducted our experiments using 105,428 real-world programs by comparing our approach with four well-known traditional static vulnerability detectors and three state-of-the-art deep-learning-based approaches. The experimental results demonstrate the effectiveness of our research and have shed light on the promising direction of combining program analysis with deep learning techniques to address the general static code analysis challenges.}, journal = {ACM Trans. Softw. Eng. Methodol.}, month = {apr}, articleno = {38}, keywords = {vulnerabilities, graph embedding, Static analysis} }
 
@INPROCEEDINGS{9674145,
  author={Haojie, Z. and Yujun, L. and Yiwei, L. and Nanxin, Z.},
  booktitle={2021 18th International Computer Conference on Wavelet Active Media Technology and Information Processing (ICCWAMTIP)}, 
  title={Vulmg: A Static Detection Solution For Source Code Vulnerabilities Based On Code Property Graph and Graph Attention Network}, 
  year={2021},
  doi={10.1109/ICCWAMTIP53232.2021.9674145}}


@InProceedings{paiva_comparison_2021,
author="Bagheri, A.
and Heged{\H{u}}s, P.",
title="A Comparison of Different Source Code Representation Methods for Vulnerability Prediction in Python",
booktitle="Quality of Information and Communications Technology",
year="2021",
abstract="In the age of big data and machine learning, at a time when the techniques and methods of software development are evolving rapidly, a problem has arisen: programmers can no longer detect all the security flaws and vulnerabilities in their code manually. To overcome this problem, developers can now rely on automatic techniques, like machine learning based prediction models, to detect such issues. An inherent property of such approaches is that they work with numeric vectors (i.e., feature vectors) as inputs. Therefore, one needs to transform the source code into such feature vectors, often referred to as code embedding. A popular approach for code embedding is to adapt natural language processing techniques, like text representation, to automatically derive the necessary features from the source code. However, the suitability and comparison of different text representation techniques for solving Software Engineering (SE) problems is rarely studied systematically. In this paper, we present a comparative study on three popular text representation methods, word2vec, fastText, and BERT applied to the SE task of detecting vulnerabilities in Python code. Using a data mining approach, we collected a large volume of Python source code in both vulnerable and fixed forms that we embedded with word2vec, fastText, and BERT to vectors and used a Long Short-Term Memory network to train on them. Using the same LSTM architecture, we could compare the efficiency of the different embeddings in deriving meaningful feature vectors. Our findings show that all the text representation methods are suitable for code representation in this particular task, but the BERT model is the most promising as it is the least time consuming and the LSTM model based on it achieved the best overall accuracy (93.8{\%}) in predicting Python source code vulnerabilities.",
isbn="978-3-030-85347-1"
}

@ARTICLE{6860243,
  author={Scandariato, R. and Walden, J. and Hovsepyan, A. and Joosen, W.},
  journal={IEEE Transactions on Software Engineering}, 
  title={Predicting Vulnerable Software Components via Text Mining}, 
  year={2014},
  doi={10.1109/TSE.2014.2340398}}

@ARTICLE{8883076,
  author={Yu, Z. and Theisen, C. and Williams, L. and Menzies, T.},
  journal={IEEE Transactions on Software Engineering}, 
  title={Improving Vulnerability Inspection Efficiency Using Active Learning}, 
  year={2021},
  doi={10.1109/TSE.2019.2949275}}


@INPROCEEDINGS{9845089,
  author={Xu, G. and Liu, L. and Zhou, Z.},
  booktitle={2022 International Conference on Blockchain Technology and Information Security (ICBCTIS)}, 
  title={Reentrancy Vulnerability Detection of Smart Contract Based on Bidirectional Sequential Neural Network with Hierarchical Attention Mechanism}, 
  year={2022},
  doi={10.1109/ICBCTIS55569.2022.00024}}


@ARTICLE{9699412,
  author={Chen, Z. and Kommrusch, S. and Monperrus, M.},
  journal={IEEE Transactions on Software Engineering}, 
  title={Neural Transfer Learning for Repairing Security Vulnerabilities in C Code}, 
  year={2023},
  doi={10.1109/TSE.2022.3147265}}


@INPROCEEDINGS{8967427,
  author={Saccente, N. and Dehlinger, J. and Deng, L. and Chakraborty, S. and Xiong, Y.},
  booktitle={2019 34th IEEE/ACM International Conference on Automated Software Engineering Workshop (ASEW)}, 
  title={Project Achilles: A Prototype Tool for Static Method-Level Vulnerability Detection of Java Source Code Using a Recurrent Neural Network}, 
  year={2019},
  doi={10.1109/ASEW.2019.00040}}


@INPROCEEDINGS{9794113,
  author={Feng, R. and Yan, Z. and Peng, S. and Zhang, Y.},
  booktitle={2022 IEEE/ACM 44th International Conference on Software Engineering (ICSE)}, 
  title={Automated Detection of Password Leakage from Public GitHub Repositories}, 
  year={2022},
  doi={10.1145/3510003.3510150}}


@InProceedings{gelenbe_empirical_2022,
author="Kalouptsoglou, I.
and Siavvas, M.
and Kehagias, D.
and Chatzigeorgiou, A.
and Ampatzoglou, A.",
title="An Empirical Evaluation of the Usefulness of Word Embedding Techniques in Deep Learning-Based Vulnerability Prediction",
booktitle="Security in Computer and Information Sciences",
year="2022",
abstract="Software security is a critical consideration for software development companies that want to provide their customers with high-quality and dependable software. The automated detection of software vulnerabilities is a critical aspect in software security. Vulnerability prediction is a mechanism that enables the detection and mitigation of software vulnerabilities early enough in the development cycle. Recently the scientific community has dedicated a lot of effort on the design of Deep learning models based on text mining techniques. Initially, Bag-of-Words was the most promising method but recently more complex models have been proposed focusing on the sequences of instructions in the source code. Recent research endeavors have started utilizing word embedding vectors, which are widely used in text classification tasks like semantic analysis, for representing the words (i.e., code instructions) in vector format. These vectors could be trained either jointly with the other layers of the neural network, or they can be pre-trained using popular algorithms like word2vec and fast-text. In this paper, we empirically examine whether the utilization of word embedding vectors that are pre-trained separately from the vulnerability predictor could lead to more accurate vulnerability prediction models. For the purposes of the present study, a popular vulnerability dataset maintained by NIST was utilized. The results of the analysis suggest that pre-training the embedding vectors separately from the neural network leads to better vulnerability predictors with respect to their effectiveness and performance.",
isbn="978-3-031-09357-9"
}

@ARTICLE{8329207,
  author={Lin, G. and Zhang, J. and Luo, W. and Pan, L. and Xiang, Y. and De Vel, O. and Montague, P.},
  journal={IEEE Transactions on Industrial Informatics}, 
  title={Cross-Project Transfer Representation Learning for Vulnerable Function Discovery}, 
  year={2018},
  doi={10.1109/TII.2018.2821768}}


@InProceedings{gervasi_line-level_2022,
author="Mosolyg{\'o}, B.
and V{\'a}ndor, N.
and Heged{\H{u}}s, P.
and Ferenc, R.",
title="A Line-Level Explainable Vulnerability Detection Approach for Java",
booktitle="Computational Science and Its Applications -- ICCSA 2022 Workshops",
year="2022",
abstract="Given our modern society's level of dependency on IT technology, high quality and security are not just desirable but rather vital properties of current software systems. Empirical methods leveraging the available rich open-source data and advanced data processing techniques of ML algorithms can help software developers ensure these properties. Nonetheless, state-of-the-art bug and vulnerability prediction methods are rarely used in practice due to numerous reasons. The predictions are not actionable in most of the cases due to their level of granularity (i.e., they mark entire classes/files to be buggy or vulnerable) and because the methods seldom provide explanation why a fragment of source code is problematic. In this paper, we present a novel Java vulnerability detection method that addresses both of these issues. It is an adaptation of our previous method for JavaScript that is capable of pinpointing vulnerable source code lines of a program together with a prototype-based explanation. The method relies on the word2vec similarity of code fragments to known vulnerable source code lines. Our empirical evaluation showed promising results, we could detect 61{\%} and 41{\%} of the vulnerable code lines by flagging only 43{\%} and 22{\%} of the program code lines, respectively, using two of the best detection configurations.",
isbn="978-3-031-10542-5"
}


@InProceedings{qin_aidetectorx_2021,
author="Chen, J.
and Liu, B.
and Cai, S.
and Wang, W.
and Wang, S.",
title="AIdetectorX: A Vulnerability Detector Based on TCN and Self-attention Mechanism",
booktitle="Dependable Software Engineering. Theories, Tools, and Applications",
year="2021",
abstract="A vulnerability detector should have both excellent detection capabilities (such as high accuracy, low false positive rate, low false negative rate, etc.) and little time overhead. However, existing vulnerability detection methods often rely on manual intervention by human experts or result in high false positives and high false negatives. Additionally, the development of deep learning techniques has prompted many scholars to conduct research in the field of vulnerability detection. Since Temporal Convolutional Networks (TCN) have causal relationships between their convolutional layers and can process information in parallel, while self-attention mechanism can attach more attention to the information related to vulnerabilities. Therefore, in this paper, we combine TCN and self-attention mechanism for vulnerability detection. This leads to the design and implementation of an improved deep learning-based vulnerability detector, called AIdetectorX. We conduct experiments on publicly available and widely used datasets for evaluating the effectiveness of AIdetectorX. Evaluation results suggest that AIdetectorX is effective for vulnerability detection and that combining TCN and self-attention mechanism can lead to higher detection capabilities and decrease time overhead.",
isbn="978-3-030-91265-9"
}

@InProceedings{zhou_vulhunter_2020,
author="Guo, N.
and Li, X.
and Yin, H.
and Gao, Y.",
title="VulHunter: An Automated Vulnerability Detection System Based on Deep Learning and Bytecode",
booktitle="Information and Communications Security",
year="2020",
abstract="The automatic detection of software vulnerability is undoubtedly an important research problem. However, existing solutions heavily rely on human experts to extract features and many security vulnerabilities may be missed (i.e., high false negative rate). In this paper, we propose a deep learning and bytecode based vulnerability detection system called Vulnerability Hunter (VulHunter) to relieve human experts from the tedious and subjective task of manually defining features. To the best of knowledge, we are the first to leverage bytecode features to represent vulnerabilities. VulHunter uses the bytecode, which is the intermediate representation output by the source code, as input to the neural networks and then calculate the similarity between the target program and vulnerability templates to determine whether it is vulnerable. We detect SQL injection and Cross Site Scripting (XSS) vulnerabilities in PHP software to evaluate the effectiveness of VulHunter. Experimental results show that VulHunter achieves more than 88{\%} (SQL injection) and 95{\%} (XSS) F1-measure when detecting a single type of vulnerability, as well as more than 90{\%} F1-measure when detecting mixed types of vulnerabilities. In addition, VulHunter has lower false positive rate (FPR) and false negative rate (FNR) than existing approaches or tools. In practice, we apply VulHunter to three real PHP software (SEACMS, ZZCMS and CMS Made Simple) and detect five vulnerabilities in which three have not been disclosed before.",
isbn="978-3-030-41579-2"
}

@InProceedings{203,
author="Renjith, G.
and Aji, S.",
title="Vulnerability Analysis and Detection Using Graph Neural Networks for Android Operating System",
booktitle="Information Systems Security",
year="2021",
abstract="Android operating system approximately contains around 93 million lines of code, mainly consisting of C, C++ and Java languages. There is no strict software engineering life-cycle followed during Android software development, and hence the design flaws and vulnerabilities are largely reported. Rising security attacks targeting Android manifests the importance of early detection of vulnerabilities in Android operating system. The existing mechanisms either focus on Android Apps or short code differences of the Android framework, and hence they are less effective for Android operating system. In this work, we extracted all the officially reported publicly accessible Android Java vulnerabilities in application and framework layers from 2015 till June 2021. The extracted vulnerable and corresponding fixed (secure) code are then converted into the graphical form using different intermediate graph representations, and then graph features are extracted. Vectorization techniques are used for converting node features of the graph into numerical formats. A vulnerability detection mechanism based on Graph Neural Network is designed and achieved an F1-score of 0.92. To the best of our knowledge, this will be one of the first works for Android operating system source code vulnerability detection technique exploiting the potential of Graph Neural Networks.",
isbn="978-3-030-92571-0"
}

@inproceedings{hovsepyan_software_2012, author = {Hovsepyan, A. and Scandariato, R. and Joosen, W. and Walden, J.}, title = {Software Vulnerability Prediction Using Text Analysis Techniques}, year = {2012}, isbn = {9781450315081}, url = {https://doi.org/10.1145/2372225.2372230}, doi = {10.1145/2372225.2372230}, abstract = {Early identification of software vulnerabilities is essential in software engineering and can help reduce not only costs, but also prevent loss of reputation and damaging litigations for a software firm. Techniques and tools for software vulnerability prediction are thus invaluable. Most of the existing techniques rely on using component characteristic(s) (like code complexity, code churn) for the vulnerability prediction. In this position paper, we present a novel approach for vulnerability prediction that leverages on the analysis of raw source code as text, instead of using "cooked" features. Our initial results seem to be very promising as the prediction model achieves an average accuracy of 0.87, precision of 0.85 and recall of 0.88 on 18 versions of a large mobile application.}, booktitle = {Proceedings of the 4th International Workshop on Security Measurements and Metrics}, keywords = {text analysis, machine learning, vulnerability prediction}, series = {MetriSec '12} }
 

@ARTICLE{9729554,
  author={Chi, J. and Qu, Y. and Liu, T. and Zheng, Q. and Yin, H.},
  journal={IEEE Transactions on Software Engineering}, 
  title={SeqTrans: Automatic Vulnerability Fix Via Sequence to Sequence Learning}, 
  year={2023},
  doi={10.1109/TSE.2022.3156637}}


@InProceedings{zhou_deep_2020,
author="Lin, G.
and Xiao, W.
and Zhang, J.
and Xiang, Y.",
title="Deep Learning-Based Vulnerable Function Detection: A Benchmark",
booktitle="Information and Communications Security",
year="2020",
abstract="The application of Deep Learning (DL) technique for code analysis enables the rich and latent patterns within software code to be revealed, facilitating various downstream tasks such as the software defect and vulnerability detection. Many DL architectures have been applied for identifying vulnerable code segments in recent literature. However, the proposed studies were evaluated on self-constructed/-collected datasets. There is a lack of unified performance criteria, acting as a baseline for measuring the effectiveness of the proposed DL-based approaches. This paper proposes a benchmarking framework for building and testing DL-based vulnerability detectors, providing six built-in mainstream neural network models with three embedding solutions available for selection. The framework also offers easy-to-use APIs for integration of new network models and embedding methods. In addition, we constructed a real-world vulnerability ground truth dataset containing manually labelled 1,471 vulnerable functions and 1,320 vulnerable files from nine open-source software projects. With the proposed framework and the ground truth dataset, researchers can conveniently establish a vulnerability detection baseline system for comparison and evaluation. This paper also includes usage examples of the proposed framework, aiming to investigate the performance behaviours of mainstream neural network models and providing a reference for DL-based vulnerability detection at function-level.",
isbn="978-3-030-41579-2"
}

@InProceedings{170,
author="Mester, A.
and Bod{\'o}, Z.",
title="Malware Classification Based on Graph Convolutional Neural Networks and Static Call Graph Features",
booktitle="Advances and Trends in Artificial Intelligence. Theory and Practices in Artificial Intelligence",
year="2022",
abstract="Advanced Persistent Threats (APT) are targeted, high level cybersecurity risk factors facing governments, financial units and other organizations. The attribution of APTs -- gathering information about the origin of an attack -- is an important key in the process of securing an organisation's infrastructure, prioritizing the measures to be taken depending on the actor(s) targeting the organisation. In practice, an elementary step in the process of attribution is determining the family and/or author of a sample, based on the binary file and/or its dynamic analysis -- i.e. a multi-class classification problem regarding the family/author label. There are numerous methods in the literature aimed to label a sample based on its control flow graph or API sequence graph. We aim to summarize the literature on these methods, and offer another method to classify malware families leveraging the static call graph of a PE executable, as well as the functions' instruction lists, using a locality-sensitive hashing method to obtain the node feature vectors. Our results are compared to recent publications in the field.",
isbn="978-3-031-08530-7"
}

@article{Narayanan_Chandramohan_Chen_Liu_2017, title={A multi-view context-aware approach to Android malware detection and malicious code localization}, DOI={10.1007/s10664-017-9539-8}, journal={Empirical Software Engineering}, author={Narayanan, A. and Chandramohan, M. and Chen, L. and Liu, Y.}, year={2017}} 

@inproceedings{susi_rasthofer_2014,
author = {Rasthofer, S. and Arzt, S. and Bodden, E.},
year = {2014},
month = {01},
title = {A Machine-learning Approach for Classifying and Categorizing Android Sources and Sinks},
isbn = {1-891562-35-5},
doi = {10.14722/ndss.2014.23039}
}

@INPROCEEDINGS{8560733,
  author={Xie, N. and Zeng, F. and Qin, X. and Zhang, Y. and Zhou, M. and Lv, C.},
  booktitle={2018 International Symposium on Theoretical Aspects of Software Engineering (TASE)}, 
  title={RepassDroid: Automatic Detection of Android Malware Based on Essential Permissions and Semantic Features of Sensitive APIs}, 
  year={2018},
  doi={10.1109/TASE.2018.00015}}


@article{10.1145/3428301, author = {Sui, Y. and Cheng, X. and Zhang, G. and Wang, H.}, title = {Flow2Vec: Value-Flow-Based Precise Code Embedding}, year = {2020}, url = {https://doi.org/10.1145/3428301}, doi = {10.1145/3428301}, abstract = {Code embedding, as an emerging paradigm for source code analysis, has attracted much attention over the past few years. It aims to represent code semantics through distributed vector representations, which can be used to support a variety of program analysis tasks (e.g., code summarization and semantic labeling). However, existing code embedding approaches are intraprocedural, alias-unaware and ignoring the asymmetric transitivity of directed graphs abstracted from source code, thus they are still ineffective in preserving the structural information of code. This paper presents Flow2Vec, a new code embedding approach that precisely preserves interprocedural program dependence (a.k.a value-flows). By approximating the high-order proximity, i.e., the asymmetric transitivity of value-flows, Flow2Vec embeds control-flows and alias-aware data-flows of a program in a low-dimensional vector space. Our value-flow embedding is formulated as matrix multiplication to preserve context-sensitive transitivity through CFL reachability by filtering out infeasible value-flow paths. We have evaluated Flow2Vec using 32 popular open-source projects. Results from our experiments show that Flow2Vec successfully boosts the performance of two recent code embedding approaches codevec and codeseq for two client applications, i.e., code classification and code summarization. For code classification, Flow2Vec improves codevec with an average increase of 21.2\%, 20.1\% and 20.7\% in precision, recall and F1, respectively. For code summarization, Flow2Vec outperforms codeseq by an average of 13.2\%, 18.8\% and 16.0\% in precision, recall and F1, respectively.}, journal = {Proc. ACM Program. Lang.}, articleno = {233}, keywords = {asymmetric transitivity, Flow2Vec, value-flows, code embedding} }


@misc{https://doi.org/10.48550/arxiv.1707.05005,
  doi = {10.48550/ARXIV.1707.05005},
  
  url = {https://arxiv.org/abs/1707.05005},
  
  author = {Narayanan, A. and Chandramohan, M. and Venkatesan, R. and Chen, L. and Liu, Y. and Jaiswal, S.},
  
  keywords = {Artificial Intelligence (cs.AI), Computation and Language (cs.CL), Cryptography and Security (cs.CR), Neural and Evolutionary Computing (cs.NE), Software Engineering (cs.SE), FOS: Computer and information sciences, FOS: Computer and information sciences},
  
  title = {graph2vec: Learning Distributed Representations of Graphs},
  
  year = {2017},
  
  copyright = {arXiv.org perpetual, non-exclusive license}
}

@article{10.1145/3290353, author = {Alon, U. and Zilberstein, M. and Levy, O. and Yahav, E.}, title = {Code2vec: Learning Distributed Representations of Code}, year = {2019}, url = {https://doi-org.proxy.library.nd.edu/10.1145/3290353}, doi = {10.1145/3290353}, abstract = {We present a neural model for representing snippets of code as continuous distributed vectors (``code embeddings''). The main idea is to represent a code snippet as a single fixed-length code vector, which can be used to predict semantic properties of the snippet. To this end, code is first decomposed to a collection of paths in its abstract syntax tree. Then, the network learns the atomic representation of each path while simultaneously learning how to aggregate a set of them. We demonstrate the effectiveness of our approach by using it to predict a method's name from the vector representation of its body. We evaluate our approach by training a model on a dataset of 12M methods. We show that code vectors trained on this dataset can predict method names from files that were unobserved during training. Furthermore, we show that our model learns useful method name vectors that capture semantic similarities, combinations, and analogies. A comparison of our approach to previous techniques over the same dataset shows an improvement of more than 75\%, making it the first to successfully predict method names based on a large, cross-project corpus. Our trained model, visualizations and vector similarities are available as an interactive online demo at http://code2vec.org. The code, data and trained models are available at https://github.com/tech-srl/code2vec.}, journal = {Proc. ACM Program. Lang.}, articleno = {40}, keywords = {Machine Learning, Distributed Representations, Big Code} }

@inproceedings{ma_graphcode2vec_2022,
	address = {Pittsburgh Pennsylvania},
	title = {{GraphCode2Vec}: generic code embedding via lexical and program dependence analyses},
	isbn = {978-1-4503-9303-4},
	shorttitle = {{GraphCode2Vec}},
	url = {https://dl.acm.org/doi/10.1145/3524842.3528456},
	doi = {10.1145/3524842.3528456},
	language = {en},
	urldate = {2023-01-20},
	booktitle = {Proceedings of the 19th {International} {Conference} on {Mining} {Software} {Repositories}},
	author = {Ma, W. and Zhao, M. and Soremekun, E. and Hu, Q. and Zhang, J. M. and Papadakis, M. and Cordy, M. and Xie, X. and Traon, Y. L.},
	month = may,
	year = {2022},
}




@inproceedings{10.1145/3551349.3560428, author = {Zhang, Z. and others}, title = {Reentrancy Vulnerability Detection and Localization: A Deep Learning Based Two-phase Approach}, year = {2023}, isbn = {9781450394758}, url = {https://doi.org/10.1145/3551349.3560428}, doi = {10.1145/3551349.3560428}, abstract = {Smart contracts have been widely and rapidly used to automate financial and business transactions together with blockchains, helping people make agreements while minimizing trusts. With millions of smart contracts deployed on blockchain, various bugs and vulnerabilities in smart contracts have emerged. Following the rapid development of deep learning, many recent studies have used deep learning for vulnerability detection to conduct security checks before deploying smart contracts. These approaches show effective results on detecting whether a smart contract is vulnerable or not whereas their results on locating suspicious statements responsible for the detected vulnerability are still unsatisfactory. To address this problem, we propose a deep learning based two-phase smart contract debugger for reentrancy vulnerability, one of the most severe vulnerabilities, named as ReVulDL: Reentrancy Vulnerability Detection and Localization. ReVulDL integrates the vulnerability detection and localization into a unified debugging pipeline. For the detection phase, given a smart contract, ReVulDL uses a graph-based pre-training model to learn the complex relationships in propagation chains for detecting whether the smart contract contains a reentrancy vulnerability. For the localization phase, if a reentrancy vulnerability is detected, ReVulDL utilizes interpretable machine learning to locate the suspicious statements in smart contract to provide interpretations of the detected vulnerability. Our large-scale empirical study on 47,398 smart contracts shows that ReVulDL achieves promising results in detecting reentrancy vulnerabilities (e.g., outperforming 16 state-of-the-art vulnerability detection approaches) and locating vulnerable statements (e.g., 70.38\% of the vulnerable statements are ranked within Top-10).}, booktitle = {Proceedings of the 37th IEEE/ACM International Conference on Automated Software Engineering}, articleno = {83}, keywords = {Smart contract, fault localization, reentrancy vulnerability, vulnerability detection}, series = {ASE '22} }

@INPROCEEDINGS{10123449,
  author={Zhou, X. and others},
  booktitle={2023 IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)}, 
  title={Security Code Recommendations for Smart Contract}, 
  year={2023},
  doi={10.1109/SANER56733.2023.00027}}


@ARTICLE{9999441,
  author={Tsai, M.-H. and others},
  journal={IEEE Access}, 
  title={PowerDP: De-Obfuscating and Profiling Malicious PowerShell Commands With Multi-Label Classifiers}, 
  year={2023},
  doi={10.1109/ACCESS.2022.3232505}}


@INPROCEEDINGS{10381286,
  author={Liu, Z. and others},
  booktitle={2023 8th International Conference on Data Science in Cyberspace (DSC)}, 
  title={Software Vulnerability Detection with GPT and In-Context Learning}, 
  year={2023},
  doi={10.1109/DSC59305.2023.00041}}



@INPROCEEDINGS{10381160,
  author={Sarbakysh, N. and Wang, Z.},
  booktitle={2023 8th International Conference on Data Science in Cyberspace (DSC)}, 
  title={A1BERT: A Language-Agnostic Graph Neural Network Model for Vulnerability Detection}, 
  year={2023},
  doi={10.1109/DSC59305.2023.00038}}


@article{VulRep_Wei_2023, title={VULREP: Vulnerability repair based on inducing commits and fixing commits}, DOI={10.1186/s13638-023-02242-7}, journal={EURASIP Journal on Wireless Communications and Networking}, author={Wei, Y. aand others}, year={2023}} 



@inproceedings{NEURIPS2020_285f89b8,
 author = {Yu, Zeping and Zheng, Wenxin and Wang, Jiaqi and Tang, Qiyi and Nie, Sen and Wu, Shi},
 booktitle = {Advances in Neural Information Processing Systems},
 editor = {H. Larochelle and M. Ranzato and R. Hadsell and M.F. Balcan and H. Lin},
 title = {CodeCMR: Cross-Modal Retrieval For Function-Level Binary Source Code Matching},
 url = {https://proceedings.neurips.cc/paper_files/paper/2020/file/285f89b802bcb2651801455c86d78f2a-Paper.pdf},
 year = {2020}
}


@misc{
zamani2023cross,
title={{CROSS} {DOMAIN} {VULNERABILITY} {DETECTION} {USING} {GRAPH} {CONTRASTIVE} {LEARNING}},
author={Mahmoud Zamani and Saquib Irtiza and Shamila C. Wickramasuriya and Latifur Khan and Kevin Hamlen},
year={2023},
url={https://openreview.net/forum?id=rrZtzI7xj2b}
}